package spirv_reflect

foreign import spirv_reflect "external/spirv_reflect.lib"

import _c "core:c"

SPIRV_H :: 1
SPV_VERSION :: 67072
SPV_REVISION :: 1
SPV_MAGIC_NUMBER :: 119734787
SPV_OP_CODE_MASK :: 65535
SPV_WORD_COUNT_SHIFT :: 16
SPIRV_REFLECT_H :: 1
SPV_REFLECT_MAX_ARRAY_DIMS                    :: 32
SPV_REFLECT_MAX_DESCRIPTOR_SETS               :: 64

SPV_REFLECT_BINDING_NUMBER_DONT_CHANGE        :: _c.UINT32_MAX
SPV_REFLECT_SET_NUMBER_DONT_CHANGE            :: _c.UINT32_MAX

SpvId :: _c.uint;
SpvSourceLanguage :: SpvSourceLanguage_;
SpvExecutionModel :: SpvExecutionModel_;
SpvAddressingModel :: SpvAddressingModel_;
SpvMemoryModel :: SpvMemoryModel_;
SpvExecutionMode :: SpvExecutionMode_;
SpvStorageClass :: SpvStorageClass_;
SpvDim :: SpvDim_;
SpvSamplerAddressingMode :: SpvSamplerAddressingMode_;
SpvSamplerFilterMode :: SpvSamplerFilterMode_;
SpvImageFormat :: SpvImageFormat_;
SpvImageChannelOrder :: SpvImageChannelOrder_;
SpvImageChannelDataType :: SpvImageChannelDataType_;
SpvImageOperandsShift :: SpvImageOperandsShift_;
SpvImageOperandsMask :: SpvImageOperandsMask_;
SpvFPFastMathModeShift :: SpvFPFastMathModeShift_;
SpvFPFastMathModeMask :: SpvFPFastMathModeMask_;
SpvFPRoundingMode :: SpvFPRoundingMode_;
SpvLinkageType :: SpvLinkageType_;
SpvAccessQualifier :: SpvAccessQualifier_;
SpvFunctionParameterAttribute :: SpvFunctionParameterAttribute_;
SpvDecoration :: SpvDecoration_;
SpvBuiltIn :: SpvBuiltIn_;
SpvSelectionControlShift :: SpvSelectionControlShift_;
SpvSelectionControlMask :: SpvSelectionControlMask_;
SpvLoopControlShift :: SpvLoopControlShift_;
SpvLoopControlMask :: SpvLoopControlMask_;
SpvFunctionControlShift :: SpvFunctionControlShift_;
SpvFunctionControlMask :: SpvFunctionControlMask_;
SpvMemorySemanticsShift :: SpvMemorySemanticsShift_;
SpvMemorySemanticsMask :: SpvMemorySemanticsMask_;
SpvMemoryAccessShift :: SpvMemoryAccessShift_;
SpvMemoryAccessMask :: SpvMemoryAccessMask_;
SpvScope :: SpvScope_;
SpvGroupOperation :: SpvGroupOperation_;
SpvKernelEnqueueFlags :: SpvKernelEnqueueFlags_;
SpvKernelProfilingInfoShift :: SpvKernelProfilingInfoShift_;
SpvKernelProfilingInfoMask :: SpvKernelProfilingInfoMask_;
SpvCapability :: SpvCapability_;
SpvRayFlagsShift :: SpvRayFlagsShift_;
SpvRayFlagsMask :: SpvRayFlagsMask_;
SpvRayQueryIntersection :: SpvRayQueryIntersection_;
SpvRayQueryCommittedIntersectionType :: SpvRayQueryCommittedIntersectionType_;
SpvRayQueryCandidateIntersectionType :: SpvRayQueryCandidateIntersectionType_;
SpvFragmentShadingRateShift :: SpvFragmentShadingRateShift_;
SpvFragmentShadingRateMask :: SpvFragmentShadingRateMask_;
SpvFPDenormMode :: SpvFPDenormMode_;
SpvFPOperationMode :: SpvFPOperationMode_;
SpvQuantizationModes :: SpvQuantizationModes_;
SpvOverflowModes :: SpvOverflowModes_;
SpvPackedVectorFormat :: SpvPackedVectorFormat_;
SpvOp :: SpvOp_;
SpvReflectModuleFlags :: u32;
SpvReflectTypeFlags :: u32;
SpvReflectDecorationFlags :: u32;
SpvReflectVariableFlags :: u32;

SpvSourceLanguage_ :: enum i32 {
    SpvSourceLanguageUnknown = 0,
    SpvSourceLanguageEssl = 1,
    SpvSourceLanguageGlsl = 2,
    SpvsourcelanguageopenclC = 3,
    SpvsourcelanguageopenclCpp = 4,
    SpvSourceLanguageHlsl = 5,
    SpvsourcelanguagecppForOpencl = 6,
    SpvSourceLanguageSycl = 7,
    SpvSourceLanguageMax = 2147483647,
};

SpvExecutionModel_ :: enum i32 {
    SpvExecutionModelVertex = 0,
    SpvExecutionModelTessellationControl = 1,
    SpvExecutionModelTessellationEvaluation = 2,
    SpvExecutionModelGeometry = 3,
    SpvExecutionModelFragment = 4,
    SpvExecutionModelGlCompute = 5,
    SpvExecutionModelKernel = 6,
    SpvExecutionModelTaskNv = 5267,
    SpvExecutionModelMeshNv = 5268,
    SpvExecutionModelRayGenerationKhr = 5313,
    SpvExecutionModelRayGenerationNv = 5313,
    SpvExecutionModelIntersectionKhr = 5314,
    SpvExecutionModelIntersectionNv = 5314,
    SpvExecutionModelAnyHitKhr = 5315,
    SpvExecutionModelAnyHitNv = 5315,
    SpvExecutionModelClosestHitKhr = 5316,
    SpvExecutionModelClosestHitNv = 5316,
    SpvExecutionModelMissKhr = 5317,
    SpvExecutionModelMissNv = 5317,
    SpvExecutionModelCallableKhr = 5318,
    SpvExecutionModelCallableNv = 5318,
    SpvExecutionModelMax = 2147483647,
};

SpvAddressingModel_ :: enum i32 {
    SpvAddressingModelLogical = 0,
    SpvAddressingModelPhysical32 = 1,
    SpvAddressingModelPhysical64 = 2,
    SpvAddressingModelPhysicalStorageBuffer64 = 5348,
    SpvAddressingModelPhysicalStorageBuffer64Ext = 5348,
    SpvAddressingModelMax = 2147483647,
};

SpvMemoryModel_ :: enum i32 {
    SpvMemoryModelSimple = 0,
    SpvMemoryModelGlsL450 = 1,
    SpvMemoryModelOpenCl = 2,
    SpvMemoryModelVulkan = 3,
    SpvMemoryModelVulkanKhr = 3,
    SpvMemoryModelMax = 2147483647,
};

SpvExecutionMode_ :: enum i32 {
    SpvExecutionModeInvocations = 0,
    SpvExecutionModeSpacingEqual = 1,
    SpvExecutionModeSpacingFractionalEven = 2,
    SpvExecutionModeSpacingFractionalOdd = 3,
    SpvExecutionModeVertexOrderCw = 4,
    SpvExecutionModeVertexOrderCcw = 5,
    SpvExecutionModePixelCenterInteger = 6,
    SpvExecutionModeOriginUpperLeft = 7,
    SpvExecutionModeOriginLowerLeft = 8,
    SpvExecutionModeEarlyFragmentTests = 9,
    SpvExecutionModePointMode = 10,
    SpvExecutionModeXfb = 11,
    SpvExecutionModeDepthReplacing = 12,
    SpvExecutionModeDepthGreater = 14,
    SpvExecutionModeDepthLess = 15,
    SpvExecutionModeDepthUnchanged = 16,
    SpvExecutionModeLocalSize = 17,
    SpvExecutionModeLocalSizeHint = 18,
    SpvExecutionModeInputPoints = 19,
    SpvExecutionModeInputLines = 20,
    SpvExecutionModeInputLinesAdjacency = 21,
    SpvExecutionModeTriangles = 22,
    SpvExecutionModeInputTrianglesAdjacency = 23,
    SpvExecutionModeQuads = 24,
    SpvExecutionModeIsolines = 25,
    SpvExecutionModeOutputVertices = 26,
    SpvExecutionModeOutputPoints = 27,
    SpvExecutionModeOutputLineStrip = 28,
    SpvExecutionModeOutputTriangleStrip = 29,
    SpvExecutionModeVecTypeHint = 30,
    SpvExecutionModeContractionOff = 31,
    SpvExecutionModeInitializer = 33,
    SpvExecutionModeFinalizer = 34,
    SpvExecutionModeSubgroupSize = 35,
    SpvExecutionModeSubgroupsPerWorkgroup = 36,
    SpvExecutionModeSubgroupsPerWorkgroupId = 37,
    SpvExecutionModeLocalSizeId = 38,
    SpvExecutionModeLocalSizeHintId = 39,
    SpvExecutionModeSubgroupUniformControlFlowKhr = 4421,
    SpvExecutionModePostDepthCoverage = 4446,
    SpvExecutionModeDenormPreserve = 4459,
    SpvExecutionModeDenormFlushToZero = 4460,
    SpvExecutionModeSignedZeroInfNanPreserve = 4461,
    SpvExecutionModeRoundingModeRte = 4462,
    SpvExecutionModeRoundingModeRtz = 4463,
    SpvExecutionModeStencilRefReplacingExt = 5027,
    SpvExecutionModeOutputLinesNv = 5269,
    SpvExecutionModeOutputPrimitivesNv = 5270,
    SpvExecutionModeDerivativeGroupQuadsNv = 5289,
    SpvExecutionModeDerivativeGroupLinearNv = 5290,
    SpvExecutionModeOutputTrianglesNv = 5298,
    SpvExecutionModePixelInterlockOrderedExt = 5366,
    SpvExecutionModePixelInterlockUnorderedExt = 5367,
    SpvExecutionModeSampleInterlockOrderedExt = 5368,
    SpvExecutionModeSampleInterlockUnorderedExt = 5369,
    SpvExecutionModeShadingRateInterlockOrderedExt = 5370,
    SpvExecutionModeShadingRateInterlockUnorderedExt = 5371,
    SpvExecutionModeSharedLocalMemorySizeIntel = 5618,
    SpvExecutionModeRoundingModeRtpintel = 5620,
    SpvExecutionModeRoundingModeRtnintel = 5621,
    SpvExecutionModeFloatingPointModeAltintel = 5622,
    SpvExecutionModeFloatingPointModeIeeeintel = 5623,
    SpvExecutionModeMaxWorkgroupSizeIntel = 5893,
    SpvExecutionModeMaxWorkDimIntel = 5894,
    SpvExecutionModeNoGlobalOffsetIntel = 5895,
    SpvExecutionModeNumSimdWorkitemsIntel = 5896,
    SpvExecutionModeSchedulerTargetFmaxMhzIntel = 5903,
    SpvExecutionModeNamedBarrierCountIntel = 6417,
    SpvExecutionModeMax = 2147483647,
};

SpvStorageClass_ :: enum i32 {
    SpvStorageClassUniformConstant = 0,
    SpvStorageClassInput = 1,
    SpvStorageClassUniform = 2,
    SpvStorageClassOutput = 3,
    SpvStorageClassWorkgroup = 4,
    SpvStorageClassCrossWorkgroup = 5,
    SpvStorageClassPrivate = 6,
    SpvStorageClassFunction = 7,
    SpvStorageClassGeneric = 8,
    SpvStorageClassPushConstant = 9,
    SpvStorageClassAtomicCounter = 10,
    SpvStorageClassImage = 11,
    SpvStorageClassStorageBuffer = 12,
    SpvStorageClassCallableDataKhr = 5328,
    SpvStorageClassCallableDataNv = 5328,
    SpvStorageClassIncomingCallableDataKhr = 5329,
    SpvStorageClassIncomingCallableDataNv = 5329,
    SpvStorageClassRayPayloadKhr = 5338,
    SpvStorageClassRayPayloadNv = 5338,
    SpvStorageClassHitAttributeKhr = 5339,
    SpvStorageClassHitAttributeNv = 5339,
    SpvStorageClassIncomingRayPayloadKhr = 5342,
    SpvStorageClassIncomingRayPayloadNv = 5342,
    SpvStorageClassShaderRecordBufferKhr = 5343,
    SpvStorageClassShaderRecordBufferNv = 5343,
    SpvStorageClassPhysicalStorageBuffer = 5349,
    SpvStorageClassPhysicalStorageBufferExt = 5349,
    SpvStorageClassCodeSectionIntel = 5605,
    SpvStorageClassDeviceOnlyIntel = 5936,
    SpvStorageClassHostOnlyIntel = 5937,
    SpvStorageClassMax = 2147483647,
};

SpvDim_ :: enum i32 {
    SpvDim1D = 0,
    SpvDim2D = 1,
    SpvDim3D = 2,
    SpvDimCube = 3,
    SpvDimRect = 4,
    SpvDimBuffer = 5,
    SpvDimSubpassData = 6,
    SpvDimMax = 2147483647,
};

SpvSamplerAddressingMode_ :: enum i32 {
    SpvSamplerAddressingModeNone = 0,
    SpvSamplerAddressingModeClampToEdge = 1,
    SpvSamplerAddressingModeClamp = 2,
    SpvSamplerAddressingModeRepeat = 3,
    SpvSamplerAddressingModeRepeatMirrored = 4,
    SpvSamplerAddressingModeMax = 2147483647,
};

SpvSamplerFilterMode_ :: enum i32 {
    SpvSamplerFilterModeNearest = 0,
    SpvSamplerFilterModeLinear = 1,
    SpvSamplerFilterModeMax = 2147483647,
};

SpvImageFormat_ :: enum i32 {
    SpvImageFormatUnknown = 0,
    SpvImageFormatRgba32F = 1,
    SpvImageFormatRgba16F = 2,
    SpvImageFormatR32F = 3,
    SpvImageFormatRgba8 = 4,
    SpvImageFormatRgba8Snorm = 5,
    SpvImageFormatRg32F = 6,
    SpvImageFormatRg16F = 7,
    SpvImageFormatR11FG11FB10F = 8,
    SpvImageFormatR16F = 9,
    SpvImageFormatRgba16 = 10,
    SpvImageFormatRgb10A2 = 11,
    SpvImageFormatRg16 = 12,
    SpvImageFormatRg8 = 13,
    SpvImageFormatR16 = 14,
    SpvImageFormatR8 = 15,
    SpvImageFormatRgba16Snorm = 16,
    SpvImageFormatRg16Snorm = 17,
    SpvImageFormatRg8Snorm = 18,
    SpvImageFormatR16Snorm = 19,
    SpvImageFormatR8Snorm = 20,
    SpvImageFormatRgba32I = 21,
    SpvImageFormatRgba16I = 22,
    SpvImageFormatRgba8I = 23,
    SpvImageFormatR32I = 24,
    SpvImageFormatRg32I = 25,
    SpvImageFormatRg16I = 26,
    SpvImageFormatRg8I = 27,
    SpvImageFormatR16I = 28,
    SpvImageFormatR8I = 29,
    SpvImageFormatRgba32Ui = 30,
    SpvImageFormatRgba16Ui = 31,
    SpvImageFormatRgba8Ui = 32,
    SpvImageFormatR32Ui = 33,
    SpvImageFormatRgb10A2Ui = 34,
    SpvImageFormatRg32Ui = 35,
    SpvImageFormatRg16Ui = 36,
    SpvImageFormatRg8Ui = 37,
    SpvImageFormatR16Ui = 38,
    SpvImageFormatR8Ui = 39,
    SpvImageFormatR64Ui = 40,
    SpvImageFormatR64I = 41,
    SpvImageFormatMax = 2147483647,
};

SpvImageChannelOrder_ :: enum i32 {
    SpvImageChannelOrderR = 0,
    SpvImageChannelOrderA = 1,
    SpvImageChannelOrderRg = 2,
    SpvImageChannelOrderRa = 3,
    SpvImageChannelOrderRgb = 4,
    SpvImageChannelOrderRgba = 5,
    SpvImageChannelOrderBgra = 6,
    SpvImageChannelOrderArgb = 7,
    SpvImageChannelOrderIntensity = 8,
    SpvImageChannelOrderLuminance = 9,
    SpvImageChannelOrderRx = 10,
    SpvImageChannelOrderRGx = 11,
    SpvImageChannelOrderRgBx = 12,
    SpvImageChannelOrderDepth = 13,
    SpvImageChannelOrderDepthStencil = 14,
    SpvImageChannelOrdersRgb = 15,
    SpvImageChannelOrdersRgBx = 16,
    SpvImageChannelOrdersRgba = 17,
    SpvImageChannelOrdersBgra = 18,
    SpvImageChannelOrderAbgr = 19,
    SpvImageChannelOrderMax = 2147483647,
};

SpvImageChannelDataType_ :: enum i32 {
    SpvImageChannelDataTypeSnormInt8 = 0,
    SpvImageChannelDataTypeSnormInt16 = 1,
    SpvImageChannelDataTypeUnormInt8 = 2,
    SpvImageChannelDataTypeUnormInt16 = 3,
    SpvImageChannelDataTypeUnormShort565 = 4,
    SpvImageChannelDataTypeUnormShort555 = 5,
    SpvImageChannelDataTypeUnormInt101010 = 6,
    SpvImageChannelDataTypeSignedInt8 = 7,
    SpvImageChannelDataTypeSignedInt16 = 8,
    SpvImageChannelDataTypeSignedInt32 = 9,
    SpvImageChannelDataTypeUnsignedInt8 = 10,
    SpvImageChannelDataTypeUnsignedInt16 = 11,
    SpvImageChannelDataTypeUnsignedInt32 = 12,
    SpvImageChannelDataTypeHalfFloat = 13,
    SpvImageChannelDataTypeFloat = 14,
    SpvImageChannelDataTypeUnormInt24 = 15,
    Spvimagechanneldatatypeunormint1010102 = 16,
    SpvImageChannelDataTypeMax = 2147483647,
};

SpvImageOperandsShift_ :: enum i32 {
    SpvImageOperandsBiasShift = 0,
    SpvImageOperandsLodShift = 1,
    SpvImageOperandsGradShift = 2,
    SpvImageOperandsConstOffsetShift = 3,
    SpvImageOperandsOffsetShift = 4,
    SpvImageOperandsConstOffsetsShift = 5,
    SpvImageOperandsSampleShift = 6,
    SpvImageOperandsMinLodShift = 7,
    SpvImageOperandsMakeTexelAvailableShift = 8,
    SpvImageOperandsMakeTexelAvailableKhrShift = 8,
    SpvImageOperandsMakeTexelVisibleShift = 9,
    SpvImageOperandsMakeTexelVisibleKhrShift = 9,
    SpvImageOperandsNonPrivateTexelShift = 10,
    SpvImageOperandsNonPrivateTexelKhrShift = 10,
    SpvImageOperandsVolatileTexelShift = 11,
    SpvImageOperandsVolatileTexelKhrShift = 11,
    SpvImageOperandsSignExtendShift = 12,
    SpvImageOperandsZeroExtendShift = 13,
    SpvImageOperandsNontemporalShift = 14,
    SpvImageOperandsOffsetsShift = 16,
    SpvImageOperandsMax = 2147483647,
};

SpvImageOperandsMask_ :: enum i32 {
    SpvImageOperandsMaskNone = 0,
    SpvImageOperandsBiasMask = 1,
    SpvImageOperandsLodMask = 2,
    SpvImageOperandsGradMask = 4,
    SpvImageOperandsConstOffsetMask = 8,
    SpvImageOperandsOffsetMask = 16,
    SpvImageOperandsConstOffsetsMask = 32,
    SpvImageOperandsSampleMask = 64,
    SpvImageOperandsMinLodMask = 128,
    SpvImageOperandsMakeTexelAvailableMask = 256,
    SpvImageOperandsMakeTexelAvailableKhrMask = 256,
    SpvImageOperandsMakeTexelVisibleMask = 512,
    SpvImageOperandsMakeTexelVisibleKhrMask = 512,
    SpvImageOperandsNonPrivateTexelMask = 1024,
    SpvImageOperandsNonPrivateTexelKhrMask = 1024,
    SpvImageOperandsVolatileTexelMask = 2048,
    SpvImageOperandsVolatileTexelKhrMask = 2048,
    SpvImageOperandsSignExtendMask = 4096,
    SpvImageOperandsZeroExtendMask = 8192,
    SpvImageOperandsNontemporalMask = 16384,
    SpvImageOperandsOffsetsMask = 65536,
};

SpvFPFastMathModeShift_ :: enum i32 {
    SpvFpFastMathModeNotNaNShift = 0,
    SpvFpFastMathModeNotInfShift = 1,
    SpvFpFastMathModeNszShift = 2,
    SpvFpFastMathModeAllowRecipShift = 3,
    SpvFpFastMathModeFastShift = 4,
    SpvFpFastMathModeAllowContractFastIntelShift = 16,
    SpvFpFastMathModeAllowReassocIntelShift = 17,
    SpvFpFastMathModeMax = 2147483647,
};

SpvFPFastMathModeMask_ :: enum i32 {
    SpvFpFastMathModeMaskNone = 0,
    SpvFpFastMathModeNotNaNMask = 1,
    SpvFpFastMathModeNotInfMask = 2,
    SpvFpFastMathModeNszMask = 4,
    SpvFpFastMathModeAllowRecipMask = 8,
    SpvFpFastMathModeFastMask = 16,
    SpvFpFastMathModeAllowContractFastIntelMask = 65536,
    SpvFpFastMathModeAllowReassocIntelMask = 131072,
};

SpvFPRoundingMode_ :: enum i32 {
    SpvFpRoundingModeRte = 0,
    SpvFpRoundingModeRtz = 1,
    SpvFpRoundingModeRtp = 2,
    SpvFpRoundingModeRtn = 3,
    SpvFpRoundingModeMax = 2147483647,
};

SpvLinkageType_ :: enum i32 {
    SpvLinkageTypeExport = 0,
    SpvLinkageTypeImport = 1,
    SpvLinkageTypeLinkOnceOdr = 2,
    SpvLinkageTypeMax = 2147483647,
};

SpvAccessQualifier_ :: enum i32 {
    SpvAccessQualifierReadOnly = 0,
    SpvAccessQualifierWriteOnly = 1,
    SpvAccessQualifierReadWrite = 2,
    SpvAccessQualifierMax = 2147483647,
};

SpvFunctionParameterAttribute_ :: enum i32 {
    SpvFunctionParameterAttributeZext = 0,
    SpvFunctionParameterAttributeSext = 1,
    SpvFunctionParameterAttributeByVal = 2,
    SpvFunctionParameterAttributeSret = 3,
    SpvFunctionParameterAttributeNoAlias = 4,
    SpvFunctionParameterAttributeNoCapture = 5,
    SpvFunctionParameterAttributeNoWrite = 6,
    SpvFunctionParameterAttributeNoReadWrite = 7,
    SpvFunctionParameterAttributeMax = 2147483647,
};

SpvDecoration_ :: enum i32 {
    SpvDecorationRelaxedPrecision = 0,
    SpvDecorationSpecId = 1,
    SpvDecorationBlock = 2,
    SpvDecorationBufferBlock = 3,
    SpvDecorationRowMajor = 4,
    SpvDecorationColMajor = 5,
    SpvDecorationArrayStride = 6,
    SpvDecorationMatrixStride = 7,
    SpvDecorationGlslShared = 8,
    SpvDecorationGlslPacked = 9,
    SpvDecorationCPacked = 10,
    SpvDecorationBuiltIn = 11,
    SpvDecorationNoPerspective = 13,
    SpvDecorationFlat = 14,
    SpvDecorationPatch = 15,
    SpvDecorationCentroid = 16,
    SpvDecorationSample = 17,
    SpvDecorationInvariant = 18,
    SpvDecorationRestrict = 19,
    SpvDecorationAliased = 20,
    SpvDecorationVolatile = 21,
    SpvDecorationConstant = 22,
    SpvDecorationCoherent = 23,
    SpvDecorationNonWritable = 24,
    SpvDecorationNonReadable = 25,
    SpvDecorationUniform = 26,
    SpvDecorationUniformId = 27,
    SpvDecorationSaturatedConversion = 28,
    SpvDecorationStream = 29,
    SpvDecorationLocation = 30,
    SpvDecorationComponent = 31,
    SpvDecorationIndex = 32,
    SpvDecorationBinding = 33,
    SpvDecorationDescriptorSet = 34,
    SpvDecorationOffset = 35,
    SpvDecorationXfbBuffer = 36,
    SpvDecorationXfbStride = 37,
    SpvDecorationFuncParamAttr = 38,
    SpvDecorationFpRoundingMode = 39,
    SpvDecorationFpFastMathMode = 40,
    SpvDecorationLinkageAttributes = 41,
    SpvDecorationNoContraction = 42,
    SpvDecorationInputAttachmentIndex = 43,
    SpvDecorationAlignment = 44,
    SpvDecorationMaxByteOffset = 45,
    SpvDecorationAlignmentId = 46,
    SpvDecorationMaxByteOffsetId = 47,
    SpvDecorationNoSignedWrap = 4469,
    SpvDecorationNoUnsignedWrap = 4470,
    SpvDecorationExplicitInterpAmd = 4999,
    SpvDecorationOverrideCoverageNv = 5248,
    SpvDecorationPassthroughNv = 5250,
    SpvDecorationViewportRelativeNv = 5252,
    SpvDecorationSecondaryViewportRelativeNv = 5256,
    SpvDecorationPerPrimitiveNv = 5271,
    SpvDecorationPerViewNv = 5272,
    SpvDecorationPerTaskNv = 5273,
    SpvDecorationPerVertexKhr = 5285,
    SpvDecorationPerVertexNv = 5285,
    SpvDecorationNonUniform = 5300,
    SpvDecorationNonUniformExt = 5300,
    SpvDecorationRestrictPointer = 5355,
    SpvDecorationRestrictPointerExt = 5355,
    SpvDecorationAliasedPointer = 5356,
    SpvDecorationAliasedPointerExt = 5356,
    SpvDecorationBindlessSamplerNv = 5398,
    SpvDecorationBindlessImageNv = 5399,
    SpvDecorationBoundSamplerNv = 5400,
    SpvDecorationBoundImageNv = 5401,
    SpvDecorationSimtCallIntel = 5599,
    SpvDecorationReferencedIndirectlyIntel = 5602,
    SpvDecorationClobberIntel = 5607,
    SpvDecorationSideEffectsIntel = 5608,
    SpvDecorationVectorComputeVariableIntel = 5624,
    SpvDecorationFuncParamIoKindIntel = 5625,
    SpvDecorationVectorComputeFunctionIntel = 5626,
    SpvDecorationStackCallIntel = 5627,
    SpvDecorationGlobalVariableOffsetIntel = 5628,
    SpvDecorationCounterBuffer = 5634,
    SpvDecorationHlslCounterBufferGoogle = 5634,
    SpvDecorationHlslSemanticGoogle = 5635,
    SpvDecorationUserSemantic = 5635,
    SpvDecorationUserTypeGoogle = 5636,
    SpvDecorationFunctionRoundingModeIntel = 5822,
    SpvDecorationFunctionDenormModeIntel = 5823,
    SpvDecorationRegisterIntel = 5825,
    SpvDecorationMemoryIntel = 5826,
    SpvDecorationNumbanksIntel = 5827,
    SpvDecorationBankwidthIntel = 5828,
    SpvDecorationMaxPrivateCopiesIntel = 5829,
    SpvDecorationSinglepumpIntel = 5830,
    SpvDecorationDoublepumpIntel = 5831,
    SpvDecorationMaxReplicatesIntel = 5832,
    SpvDecorationSimpleDualPortIntel = 5833,
    SpvDecorationMergeIntel = 5834,
    SpvDecorationBankBitsIntel = 5835,
    SpvDecorationForcePow2DepthIntel = 5836,
    SpvDecorationBurstCoalesceIntel = 5899,
    SpvDecorationCacheSizeIntel = 5900,
    SpvDecorationDontStaticallyCoalesceIntel = 5901,
    SpvDecorationPrefetchIntel = 5902,
    SpvDecorationStallEnableIntel = 5905,
    SpvDecorationFuseLoopsInFunctionIntel = 5907,
    SpvDecorationAliasScopeIntel = 5914,
    SpvDecorationNoAliasIntel = 5915,
    SpvDecorationBufferLocationIntel = 5921,
    SpvDecorationIoPipeStorageIntel = 5944,
    SpvDecorationFunctionFloatingPointModeIntel = 6080,
    SpvDecorationSingleElementVectorIntel = 6085,
    SpvDecorationVectorComputeCallableFunctionIntel = 6087,
    SpvDecorationMediaBlockIointel = 6140,
    SpvDecorationMax = 2147483647,
};

SpvBuiltIn_ :: enum i32 {
    SpvBuiltInPosition = 0,
    SpvBuiltInPointSize = 1,
    SpvBuiltInClipDistance = 3,
    SpvBuiltInCullDistance = 4,
    SpvBuiltInVertexId = 5,
    SpvBuiltInInstanceId = 6,
    SpvBuiltInPrimitiveId = 7,
    SpvBuiltInInvocationId = 8,
    SpvBuiltInLayer = 9,
    SpvBuiltInViewportIndex = 10,
    SpvBuiltInTessLevelOuter = 11,
    SpvBuiltInTessLevelInner = 12,
    SpvBuiltInTessCoord = 13,
    SpvBuiltInPatchVertices = 14,
    SpvBuiltInFragCoord = 15,
    SpvBuiltInPointCoord = 16,
    SpvBuiltInFrontFacing = 17,
    SpvBuiltInSampleId = 18,
    SpvBuiltInSamplePosition = 19,
    SpvBuiltInSampleMask = 20,
    SpvBuiltInFragDepth = 22,
    SpvBuiltInHelperInvocation = 23,
    SpvBuiltInNumWorkgroups = 24,
    SpvBuiltInWorkgroupSize = 25,
    SpvBuiltInWorkgroupId = 26,
    SpvBuiltInLocalInvocationId = 27,
    SpvBuiltInGlobalInvocationId = 28,
    SpvBuiltInLocalInvocationIndex = 29,
    SpvBuiltInWorkDim = 30,
    SpvBuiltInGlobalSize = 31,
    SpvBuiltInEnqueuedWorkgroupSize = 32,
    SpvBuiltInGlobalOffset = 33,
    SpvBuiltInGlobalLinearId = 34,
    SpvBuiltInSubgroupSize = 36,
    SpvBuiltInSubgroupMaxSize = 37,
    SpvBuiltInNumSubgroups = 38,
    SpvBuiltInNumEnqueuedSubgroups = 39,
    SpvBuiltInSubgroupId = 40,
    SpvBuiltInSubgroupLocalInvocationId = 41,
    SpvBuiltInVertexIndex = 42,
    SpvBuiltInInstanceIndex = 43,
    SpvBuiltInSubgroupEqMask = 4416,
    SpvBuiltInSubgroupEqMaskKhr = 4416,
    SpvBuiltInSubgroupGeMask = 4417,
    SpvBuiltInSubgroupGeMaskKhr = 4417,
    SpvBuiltInSubgroupGtMask = 4418,
    SpvBuiltInSubgroupGtMaskKhr = 4418,
    SpvBuiltInSubgroupLeMask = 4419,
    SpvBuiltInSubgroupLeMaskKhr = 4419,
    SpvBuiltInSubgroupLtMask = 4420,
    SpvBuiltInSubgroupLtMaskKhr = 4420,
    SpvBuiltInBaseVertex = 4424,
    SpvBuiltInBaseInstance = 4425,
    SpvBuiltInDrawIndex = 4426,
    SpvBuiltInPrimitiveShadingRateKhr = 4432,
    SpvBuiltInDeviceIndex = 4438,
    SpvBuiltInViewIndex = 4440,
    SpvBuiltInShadingRateKhr = 4444,
    SpvBuiltInBaryCoordNoPerspAmd = 4992,
    SpvBuiltInBaryCoordNoPerspCentroidAmd = 4993,
    SpvBuiltInBaryCoordNoPerspSampleAmd = 4994,
    SpvBuiltInBaryCoordSmoothAmd = 4995,
    SpvBuiltInBaryCoordSmoothCentroidAmd = 4996,
    SpvBuiltInBaryCoordSmoothSampleAmd = 4997,
    SpvBuiltInBaryCoordPullModelAmd = 4998,
    SpvBuiltInFragStencilRefExt = 5014,
    SpvBuiltInViewportMaskNv = 5253,
    SpvBuiltInSecondaryPositionNv = 5257,
    SpvBuiltInSecondaryViewportMaskNv = 5258,
    SpvBuiltInPositionPerViewNv = 5261,
    SpvBuiltInViewportMaskPerViewNv = 5262,
    SpvBuiltInFullyCoveredExt = 5264,
    SpvBuiltInTaskCountNv = 5274,
    SpvBuiltInPrimitiveCountNv = 5275,
    SpvBuiltInPrimitiveIndicesNv = 5276,
    SpvBuiltInClipDistancePerViewNv = 5277,
    SpvBuiltInCullDistancePerViewNv = 5278,
    SpvBuiltInLayerPerViewNv = 5279,
    SpvBuiltInMeshViewCountNv = 5280,
    SpvBuiltInMeshViewIndicesNv = 5281,
    SpvBuiltInBaryCoordKhr = 5286,
    SpvBuiltInBaryCoordNv = 5286,
    SpvBuiltInBaryCoordNoPerspKhr = 5287,
    SpvBuiltInBaryCoordNoPerspNv = 5287,
    SpvBuiltInFragSizeExt = 5292,
    SpvBuiltInFragmentSizeNv = 5292,
    SpvBuiltInFragInvocationCountExt = 5293,
    SpvBuiltInInvocationsPerPixelNv = 5293,
    SpvBuiltInLaunchIdKhr = 5319,
    SpvBuiltInLaunchIdNv = 5319,
    SpvBuiltInLaunchSizeKhr = 5320,
    SpvBuiltInLaunchSizeNv = 5320,
    SpvBuiltInWorldRayOriginKhr = 5321,
    SpvBuiltInWorldRayOriginNv = 5321,
    SpvBuiltInWorldRayDirectionKhr = 5322,
    SpvBuiltInWorldRayDirectionNv = 5322,
    SpvBuiltInObjectRayOriginKhr = 5323,
    SpvBuiltInObjectRayOriginNv = 5323,
    SpvBuiltInObjectRayDirectionKhr = 5324,
    SpvBuiltInObjectRayDirectionNv = 5324,
    SpvBuiltInRayTminKhr = 5325,
    SpvBuiltInRayTminNv = 5325,
    SpvBuiltInRayTmaxKhr = 5326,
    SpvBuiltInRayTmaxNv = 5326,
    SpvBuiltInInstanceCustomIndexKhr = 5327,
    SpvBuiltInInstanceCustomIndexNv = 5327,
    SpvBuiltInObjectToWorldKhr = 5330,
    SpvBuiltInObjectToWorldNv = 5330,
    SpvBuiltInWorldToObjectKhr = 5331,
    SpvBuiltInWorldToObjectNv = 5331,
    SpvBuiltInHitTnv = 5332,
    SpvBuiltInHitKindKhr = 5333,
    SpvBuiltInHitKindNv = 5333,
    SpvBuiltInCurrentRayTimeNv = 5334,
    SpvBuiltInIncomingRayFlagsKhr = 5351,
    SpvBuiltInIncomingRayFlagsNv = 5351,
    SpvBuiltInRayGeometryIndexKhr = 5352,
    SpvBuiltInWarpsPerSmnv = 5374,
    SpvBuiltInSmCountNv = 5375,
    SpvBuiltInWarpIdnv = 5376,
    SpvBuiltInSmidnv = 5377,
    SpvBuiltInCullMaskKhr = 6021,
    SpvBuiltInMax = 2147483647,
};

SpvSelectionControlShift_ :: enum i32 {
    SpvSelectionControlFlattenShift = 0,
    SpvSelectionControlDontFlattenShift = 1,
    SpvSelectionControlMax = 2147483647,
};

SpvSelectionControlMask_ :: enum i32 {
    SpvSelectionControlMaskNone = 0,
    SpvSelectionControlFlattenMask = 1,
    SpvSelectionControlDontFlattenMask = 2,
};

SpvLoopControlShift_ :: enum i32 {
    SpvLoopControlUnrollShift = 0,
    SpvLoopControlDontUnrollShift = 1,
    SpvLoopControlDependencyInfiniteShift = 2,
    SpvLoopControlDependencyLengthShift = 3,
    SpvLoopControlMinIterationsShift = 4,
    SpvLoopControlMaxIterationsShift = 5,
    SpvLoopControlIterationMultipleShift = 6,
    SpvLoopControlPeelCountShift = 7,
    SpvLoopControlPartialCountShift = 8,
    SpvLoopControlInitiationIntervalIntelShift = 16,
    SpvLoopControlMaxConcurrencyIntelShift = 17,
    SpvLoopControlDependencyArrayIntelShift = 18,
    SpvLoopControlPipelineEnableIntelShift = 19,
    SpvLoopControlLoopCoalesceIntelShift = 20,
    SpvLoopControlMaxInterleavingIntelShift = 21,
    SpvLoopControlSpeculatedIterationsIntelShift = 22,
    SpvLoopControlNoFusionIntelShift = 23,
    SpvLoopControlMax = 2147483647,
};

SpvLoopControlMask_ :: enum i32 {
    SpvLoopControlMaskNone = 0,
    SpvLoopControlUnrollMask = 1,
    SpvLoopControlDontUnrollMask = 2,
    SpvLoopControlDependencyInfiniteMask = 4,
    SpvLoopControlDependencyLengthMask = 8,
    SpvLoopControlMinIterationsMask = 16,
    SpvLoopControlMaxIterationsMask = 32,
    SpvLoopControlIterationMultipleMask = 64,
    SpvLoopControlPeelCountMask = 128,
    SpvLoopControlPartialCountMask = 256,
    SpvLoopControlInitiationIntervalIntelMask = 65536,
    SpvLoopControlMaxConcurrencyIntelMask = 131072,
    SpvLoopControlDependencyArrayIntelMask = 262144,
    SpvLoopControlPipelineEnableIntelMask = 524288,
    SpvLoopControlLoopCoalesceIntelMask = 1048576,
    SpvLoopControlMaxInterleavingIntelMask = 2097152,
    SpvLoopControlSpeculatedIterationsIntelMask = 4194304,
    SpvLoopControlNoFusionIntelMask = 8388608,
};

SpvFunctionControlShift_ :: enum i32 {
    SpvFunctionControlInlineShift = 0,
    SpvFunctionControlDontInlineShift = 1,
    SpvFunctionControlPureShift = 2,
    SpvFunctionControlConstShift = 3,
    SpvFunctionControlOptNoneIntelShift = 16,
    SpvFunctionControlMax = 2147483647,
};

SpvFunctionControlMask_ :: enum i32 {
    SpvFunctionControlMaskNone = 0,
    SpvFunctionControlInlineMask = 1,
    SpvFunctionControlDontInlineMask = 2,
    SpvFunctionControlPureMask = 4,
    SpvFunctionControlConstMask = 8,
    SpvFunctionControlOptNoneIntelMask = 65536,
};

SpvMemorySemanticsShift_ :: enum i32 {
    SpvMemorySemanticsAcquireShift = 1,
    SpvMemorySemanticsReleaseShift = 2,
    SpvMemorySemanticsAcquireReleaseShift = 3,
    SpvMemorySemanticsSequentiallyConsistentShift = 4,
    SpvMemorySemanticsUniformMemoryShift = 6,
    SpvMemorySemanticsSubgroupMemoryShift = 7,
    SpvMemorySemanticsWorkgroupMemoryShift = 8,
    SpvMemorySemanticsCrossWorkgroupMemoryShift = 9,
    SpvMemorySemanticsAtomicCounterMemoryShift = 10,
    SpvMemorySemanticsImageMemoryShift = 11,
    SpvMemorySemanticsOutputMemoryShift = 12,
    SpvMemorySemanticsOutputMemoryKhrShift = 12,
    SpvMemorySemanticsMakeAvailableShift = 13,
    SpvMemorySemanticsMakeAvailableKhrShift = 13,
    SpvMemorySemanticsMakeVisibleShift = 14,
    SpvMemorySemanticsMakeVisibleKhrShift = 14,
    SpvMemorySemanticsVolatileShift = 15,
    SpvMemorySemanticsMax = 2147483647,
};

SpvMemorySemanticsMask_ :: enum i32 {
    SpvMemorySemanticsMaskNone = 0,
    SpvMemorySemanticsAcquireMask = 2,
    SpvMemorySemanticsReleaseMask = 4,
    SpvMemorySemanticsAcquireReleaseMask = 8,
    SpvMemorySemanticsSequentiallyConsistentMask = 16,
    SpvMemorySemanticsUniformMemoryMask = 64,
    SpvMemorySemanticsSubgroupMemoryMask = 128,
    SpvMemorySemanticsWorkgroupMemoryMask = 256,
    SpvMemorySemanticsCrossWorkgroupMemoryMask = 512,
    SpvMemorySemanticsAtomicCounterMemoryMask = 1024,
    SpvMemorySemanticsImageMemoryMask = 2048,
    SpvMemorySemanticsOutputMemoryMask = 4096,
    SpvMemorySemanticsOutputMemoryKhrMask = 4096,
    SpvMemorySemanticsMakeAvailableMask = 8192,
    SpvMemorySemanticsMakeAvailableKhrMask = 8192,
    SpvMemorySemanticsMakeVisibleMask = 16384,
    SpvMemorySemanticsMakeVisibleKhrMask = 16384,
    SpvMemorySemanticsVolatileMask = 32768,
};

SpvMemoryAccessShift_ :: enum i32 {
    SpvMemoryAccessVolatileShift = 0,
    SpvMemoryAccessAlignedShift = 1,
    SpvMemoryAccessNontemporalShift = 2,
    SpvMemoryAccessMakePointerAvailableShift = 3,
    SpvMemoryAccessMakePointerAvailableKhrShift = 3,
    SpvMemoryAccessMakePointerVisibleShift = 4,
    SpvMemoryAccessMakePointerVisibleKhrShift = 4,
    SpvMemoryAccessNonPrivatePointerShift = 5,
    SpvMemoryAccessNonPrivatePointerKhrShift = 5,
    SpvMemoryAccessAliasScopeIntelMaskShift = 16,
    SpvMemoryAccessNoAliasIntelMaskShift = 17,
    SpvMemoryAccessMax = 2147483647,
};

SpvMemoryAccessMask_ :: enum i32 {
    SpvMemoryAccessMaskNone = 0,
    SpvMemoryAccessVolatileMask = 1,
    SpvMemoryAccessAlignedMask = 2,
    SpvMemoryAccessNontemporalMask = 4,
    SpvMemoryAccessMakePointerAvailableMask = 8,
    SpvMemoryAccessMakePointerAvailableKhrMask = 8,
    SpvMemoryAccessMakePointerVisibleMask = 16,
    SpvMemoryAccessMakePointerVisibleKhrMask = 16,
    SpvMemoryAccessNonPrivatePointerMask = 32,
    SpvMemoryAccessNonPrivatePointerKhrMask = 32,
    SpvMemoryAccessAliasScopeIntelMaskMask = 65536,
    SpvMemoryAccessNoAliasIntelMaskMask = 131072,
};

SpvScope_ :: enum i32 {
    SpvScopeCrossDevice = 0,
    SpvScopeDevice = 1,
    SpvScopeWorkgroup = 2,
    SpvScopeSubgroup = 3,
    SpvScopeInvocation = 4,
    SpvScopeQueueFamily = 5,
    SpvScopeQueueFamilyKhr = 5,
    SpvScopeShaderCallKhr = 6,
    SpvScopeMax = 2147483647,
};

SpvGroupOperation_ :: enum i32 {
    SpvGroupOperationReduce = 0,
    SpvGroupOperationInclusiveScan = 1,
    SpvGroupOperationExclusiveScan = 2,
    SpvGroupOperationClusteredReduce = 3,
    SpvGroupOperationPartitionedReduceNv = 6,
    SpvGroupOperationPartitionedInclusiveScanNv = 7,
    SpvGroupOperationPartitionedExclusiveScanNv = 8,
    SpvGroupOperationMax = 2147483647,
};

SpvKernelEnqueueFlags_ :: enum i32 {
    SpvKernelEnqueueFlagsNoWait = 0,
    SpvKernelEnqueueFlagsWaitKernel = 1,
    SpvKernelEnqueueFlagsWaitWorkGroup = 2,
    SpvKernelEnqueueFlagsMax = 2147483647,
};

SpvKernelProfilingInfoShift_ :: enum i32 {
    SpvKernelProfilingInfoCmdExecTimeShift = 0,
    SpvKernelProfilingInfoMax = 2147483647,
};

SpvKernelProfilingInfoMask_ :: enum i32 {
    SpvKernelProfilingInfoMaskNone = 0,
    SpvKernelProfilingInfoCmdExecTimeMask = 1,
};

SpvCapability_ :: enum i32 {
    SpvCapabilityMatrix = 0,
    SpvCapabilityShader = 1,
    SpvCapabilityGeometry = 2,
    SpvCapabilityTessellation = 3,
    SpvCapabilityAddresses = 4,
    SpvCapabilityLinkage = 5,
    SpvCapabilityKernel = 6,
    SpvCapabilityVector16 = 7,
    SpvCapabilityFloat16Buffer = 8,
    SpvCapabilityFloat16 = 9,
    SpvCapabilityFloat64 = 10,
    SpvCapabilityInt64 = 11,
    SpvCapabilityInt64Atomics = 12,
    SpvCapabilityImageBasic = 13,
    SpvCapabilityImageReadWrite = 14,
    SpvCapabilityImageMipmap = 15,
    SpvCapabilityPipes = 17,
    SpvCapabilityGroups = 18,
    SpvCapabilityDeviceEnqueue = 19,
    SpvCapabilityLiteralSampler = 20,
    SpvCapabilityAtomicStorage = 21,
    SpvCapabilityInt16 = 22,
    SpvCapabilityTessellationPointSize = 23,
    SpvCapabilityGeometryPointSize = 24,
    SpvCapabilityImageGatherExtended = 25,
    SpvCapabilityStorageImageMultisample = 27,
    SpvCapabilityUniformBufferArrayDynamicIndexing = 28,
    SpvCapabilitySampledImageArrayDynamicIndexing = 29,
    SpvCapabilityStorageBufferArrayDynamicIndexing = 30,
    SpvCapabilityStorageImageArrayDynamicIndexing = 31,
    SpvCapabilityClipDistance = 32,
    SpvCapabilityCullDistance = 33,
    SpvCapabilityImageCubeArray = 34,
    SpvCapabilitySampleRateShading = 35,
    SpvCapabilityImageRect = 36,
    SpvCapabilitySampledRect = 37,
    SpvCapabilityGenericPointer = 38,
    SpvCapabilityInt8 = 39,
    SpvCapabilityInputAttachment = 40,
    SpvCapabilitySparseResidency = 41,
    SpvCapabilityMinLod = 42,
    SpvCapabilitySampled1D = 43,
    SpvCapabilityImage1D = 44,
    SpvCapabilitySampledCubeArray = 45,
    SpvCapabilitySampledBuffer = 46,
    SpvCapabilityImageBuffer = 47,
    SpvCapabilityImageMsArray = 48,
    SpvCapabilityStorageImageExtendedFormats = 49,
    SpvCapabilityImageQuery = 50,
    SpvCapabilityDerivativeControl = 51,
    SpvCapabilityInterpolationFunction = 52,
    SpvCapabilityTransformFeedback = 53,
    SpvCapabilityGeometryStreams = 54,
    SpvCapabilityStorageImageReadWithoutFormat = 55,
    SpvCapabilityStorageImageWriteWithoutFormat = 56,
    SpvCapabilityMultiViewport = 57,
    SpvCapabilitySubgroupDispatch = 58,
    SpvCapabilityNamedBarrier = 59,
    SpvCapabilityPipeStorage = 60,
    SpvCapabilityGroupNonUniform = 61,
    SpvCapabilityGroupNonUniformVote = 62,
    SpvCapabilityGroupNonUniformArithmetic = 63,
    SpvCapabilityGroupNonUniformBallot = 64,
    SpvCapabilityGroupNonUniformShuffle = 65,
    SpvCapabilityGroupNonUniformShuffleRelative = 66,
    SpvCapabilityGroupNonUniformClustered = 67,
    SpvCapabilityGroupNonUniformQuad = 68,
    SpvCapabilityShaderLayer = 69,
    SpvCapabilityShaderViewportIndex = 70,
    SpvCapabilityUniformDecoration = 71,
    SpvCapabilityFragmentShadingRateKhr = 4422,
    SpvCapabilitySubgroupBallotKhr = 4423,
    SpvCapabilityDrawParameters = 4427,
    SpvCapabilityWorkgroupMemoryExplicitLayoutKhr = 4428,
    SpvCapabilityWorkgroupMemoryExplicitLayout8BitAccessKhr = 4429,
    SpvCapabilityWorkgroupMemoryExplicitLayout16BitAccessKhr = 4430,
    SpvCapabilitySubgroupVoteKhr = 4431,
    SpvCapabilityStorageBuffer16BitAccess = 4433,
    SpvCapabilityStorageUniformBufferBlock16 = 4433,
    SpvCapabilityStorageUniform16 = 4434,
    SpvCapabilityUniformAndStorageBuffer16BitAccess = 4434,
    SpvCapabilityStoragePushConstant16 = 4435,
    SpvCapabilityStorageInputOutput16 = 4436,
    SpvCapabilityDeviceGroup = 4437,
    SpvCapabilityMultiView = 4439,
    SpvCapabilityVariablePointersStorageBuffer = 4441,
    SpvCapabilityVariablePointers = 4442,
    SpvCapabilityAtomicStorageOps = 4445,
    SpvCapabilitySampleMaskPostDepthCoverage = 4447,
    SpvCapabilityStorageBuffer8BitAccess = 4448,
    SpvCapabilityUniformAndStorageBuffer8BitAccess = 4449,
    SpvCapabilityStoragePushConstant8 = 4450,
    SpvCapabilityDenormPreserve = 4464,
    SpvCapabilityDenormFlushToZero = 4465,
    SpvCapabilitySignedZeroInfNanPreserve = 4466,
    SpvCapabilityRoundingModeRte = 4467,
    SpvCapabilityRoundingModeRtz = 4468,
    SpvCapabilityRayQueryProvisionalKhr = 4471,
    SpvCapabilityRayQueryKhr = 4472,
    SpvCapabilityRayTraversalPrimitiveCullingKhr = 4478,
    SpvCapabilityRayTracingKhr = 4479,
    SpvCapabilityFloat16ImageAmd = 5008,
    SpvCapabilityImageGatherBiasLodAmd = 5009,
    SpvCapabilityFragmentMaskAmd = 5010,
    SpvCapabilityStencilExportExt = 5013,
    SpvCapabilityImageReadWriteLodAmd = 5015,
    SpvCapabilityInt64ImageExt = 5016,
    SpvCapabilityShaderClockKhr = 5055,
    SpvCapabilitySampleMaskOverrideCoverageNv = 5249,
    SpvCapabilityGeometryShaderPassthroughNv = 5251,
    SpvCapabilityShaderViewportIndexLayerExt = 5254,
    SpvCapabilityShaderViewportIndexLayerNv = 5254,
    SpvCapabilityShaderViewportMaskNv = 5255,
    SpvCapabilityShaderStereoViewNv = 5259,
    SpvCapabilityPerViewAttributesNv = 5260,
    SpvCapabilityFragmentFullyCoveredExt = 5265,
    SpvCapabilityMeshShadingNv = 5266,
    SpvCapabilityImageFootprintNv = 5282,
    SpvCapabilityFragmentBarycentricKhr = 5284,
    SpvCapabilityFragmentBarycentricNv = 5284,
    SpvCapabilityComputeDerivativeGroupQuadsNv = 5288,
    SpvCapabilityFragmentDensityExt = 5291,
    SpvCapabilityShadingRateNv = 5291,
    SpvCapabilityGroupNonUniformPartitionedNv = 5297,
    SpvCapabilityShaderNonUniform = 5301,
    SpvCapabilityShaderNonUniformExt = 5301,
    SpvCapabilityRuntimeDescriptorArray = 5302,
    SpvCapabilityRuntimeDescriptorArrayExt = 5302,
    SpvCapabilityInputAttachmentArrayDynamicIndexing = 5303,
    SpvCapabilityInputAttachmentArrayDynamicIndexingExt = 5303,
    SpvCapabilityUniformTexelBufferArrayDynamicIndexing = 5304,
    SpvCapabilityUniformTexelBufferArrayDynamicIndexingExt = 5304,
    SpvCapabilityStorageTexelBufferArrayDynamicIndexing = 5305,
    SpvCapabilityStorageTexelBufferArrayDynamicIndexingExt = 5305,
    SpvCapabilityUniformBufferArrayNonUniformIndexing = 5306,
    SpvCapabilityUniformBufferArrayNonUniformIndexingExt = 5306,
    SpvCapabilitySampledImageArrayNonUniformIndexing = 5307,
    SpvCapabilitySampledImageArrayNonUniformIndexingExt = 5307,
    SpvCapabilityStorageBufferArrayNonUniformIndexing = 5308,
    SpvCapabilityStorageBufferArrayNonUniformIndexingExt = 5308,
    SpvCapabilityStorageImageArrayNonUniformIndexing = 5309,
    SpvCapabilityStorageImageArrayNonUniformIndexingExt = 5309,
    SpvCapabilityInputAttachmentArrayNonUniformIndexing = 5310,
    SpvCapabilityInputAttachmentArrayNonUniformIndexingExt = 5310,
    SpvCapabilityUniformTexelBufferArrayNonUniformIndexing = 5311,
    SpvCapabilityUniformTexelBufferArrayNonUniformIndexingExt = 5311,
    SpvCapabilityStorageTexelBufferArrayNonUniformIndexing = 5312,
    SpvCapabilityStorageTexelBufferArrayNonUniformIndexingExt = 5312,
    SpvCapabilityRayTracingNv = 5340,
    SpvCapabilityRayTracingMotionBlurNv = 5341,
    SpvCapabilityVulkanMemoryModel = 5345,
    SpvCapabilityVulkanMemoryModelKhr = 5345,
    SpvCapabilityVulkanMemoryModelDeviceScope = 5346,
    SpvCapabilityVulkanMemoryModelDeviceScopeKhr = 5346,
    SpvCapabilityPhysicalStorageBufferAddresses = 5347,
    SpvCapabilityPhysicalStorageBufferAddressesExt = 5347,
    SpvCapabilityComputeDerivativeGroupLinearNv = 5350,
    SpvCapabilityRayTracingProvisionalKhr = 5353,
    SpvCapabilityCooperativeMatrixNv = 5357,
    SpvCapabilityFragmentShaderSampleInterlockExt = 5363,
    SpvCapabilityFragmentShaderShadingRateInterlockExt = 5372,
    SpvCapabilityShaderSmBuiltinsNv = 5373,
    SpvCapabilityFragmentShaderPixelInterlockExt = 5378,
    SpvCapabilityDemoteToHelperInvocation = 5379,
    SpvCapabilityDemoteToHelperInvocationExt = 5379,
    SpvCapabilityBindlessTextureNv = 5390,
    SpvCapabilitySubgroupShuffleIntel = 5568,
    SpvCapabilitySubgroupBufferBlockIointel = 5569,
    SpvCapabilitySubgroupImageBlockIointel = 5570,
    SpvCapabilitySubgroupImageMediaBlockIointel = 5579,
    SpvCapabilityRoundToInfinityIntel = 5582,
    SpvCapabilityFloatingPointModeIntel = 5583,
    SpvCapabilityIntegerFunctions2Intel = 5584,
    SpvCapabilityFunctionPointersIntel = 5603,
    SpvCapabilityIndirectReferencesIntel = 5604,
    SpvCapabilityAsmIntel = 5606,
    SpvCapabilityAtomicFloat32MinMaxExt = 5612,
    SpvCapabilityAtomicFloat64MinMaxExt = 5613,
    SpvCapabilityAtomicFloat16MinMaxExt = 5616,
    SpvCapabilityVectorComputeIntel = 5617,
    SpvCapabilityVectorAnyIntel = 5619,
    SpvCapabilityExpectAssumeKhr = 5629,
    SpvCapabilitySubgroupAvcMotionEstimationIntel = 5696,
    SpvCapabilitySubgroupAvcMotionEstimationIntraIntel = 5697,
    SpvCapabilitySubgroupAvcMotionEstimationChromaIntel = 5698,
    SpvCapabilityVariableLengthArrayIntel = 5817,
    SpvCapabilityFunctionFloatControlIntel = 5821,
    SpvCapabilityFpgaMemoryAttributesIntel = 5824,
    SpvCapabilityFpFastMathModeIntel = 5837,
    SpvCapabilityArbitraryPrecisionIntegersIntel = 5844,
    SpvCapabilityArbitraryPrecisionFloatingPointIntel = 5845,
    SpvCapabilityUnstructuredLoopControlsIntel = 5886,
    SpvCapabilityFpgaLoopControlsIntel = 5888,
    SpvCapabilityKernelAttributesIntel = 5892,
    SpvCapabilityFpgaKernelAttributesIntel = 5897,
    SpvCapabilityFpgaMemoryAccessesIntel = 5898,
    SpvCapabilityFpgaClusterAttributesIntel = 5904,
    SpvCapabilityLoopFuseIntel = 5906,
    SpvCapabilityMemoryAccessAliasingIntel = 5910,
    SpvCapabilityFpgaBufferLocationIntel = 5920,
    SpvCapabilityArbitraryPrecisionFixedPointIntel = 5922,
    SpvCapabilityUsmStorageClassesIntel = 5935,
    SpvCapabilityIoPipesIntel = 5943,
    SpvCapabilityBlockingPipesIntel = 5945,
    SpvCapabilityFpgaRegIntel = 5948,
    SpvCapabilityDotProductInputAll = 6016,
    SpvCapabilityDotProductInputAllKhr = 6016,
    SpvCapabilityDotProductInput4X8Bit = 6017,
    SpvCapabilityDotProductInput4X8BitKhr = 6017,
    SpvCapabilityDotProductInput4X8BitPacked = 6018,
    SpvCapabilityDotProductInput4X8BitPackedKhr = 6018,
    SpvCapabilityDotProduct = 6019,
    SpvCapabilityDotProductKhr = 6019,
    SpvCapabilityRayCullMaskKhr = 6020,
    SpvCapabilityBitInstructions = 6025,
    SpvCapabilityGroupNonUniformRotateKhr = 6026,
    SpvCapabilityAtomicFloat32AddExt = 6033,
    SpvCapabilityAtomicFloat64AddExt = 6034,
    SpvCapabilityLongConstantCompositeIntel = 6089,
    SpvCapabilityOptNoneIntel = 6094,
    SpvCapabilityAtomicFloat16AddExt = 6095,
    SpvCapabilityDebugInfoModuleIntel = 6114,
    SpvCapabilitySplitBarrierIntel = 6141,
    SpvCapabilityGroupUniformArithmeticKhr = 6400,
    SpvCapabilityMax = 2147483647,
};

SpvRayFlagsShift_ :: enum i32 {
    SpvRayFlagsOpaqueKhrShift = 0,
    SpvRayFlagsNoOpaqueKhrShift = 1,
    SpvRayFlagsTerminateOnFirstHitKhrShift = 2,
    SpvRayFlagsSkipClosestHitShaderKhrShift = 3,
    SpvRayFlagsCullBackFacingTrianglesKhrShift = 4,
    SpvRayFlagsCullFrontFacingTrianglesKhrShift = 5,
    SpvRayFlagsCullOpaqueKhrShift = 6,
    SpvRayFlagsCullNoOpaqueKhrShift = 7,
    SpvRayFlagsSkipTrianglesKhrShift = 8,
    SpvRayFlagsSkipAabBsKhrShift = 9,
    SpvRayFlagsMax = 2147483647,
};

SpvRayFlagsMask_ :: enum i32 {
    SpvRayFlagsMaskNone = 0,
    SpvRayFlagsOpaqueKhrMask = 1,
    SpvRayFlagsNoOpaqueKhrMask = 2,
    SpvRayFlagsTerminateOnFirstHitKhrMask = 4,
    SpvRayFlagsSkipClosestHitShaderKhrMask = 8,
    SpvRayFlagsCullBackFacingTrianglesKhrMask = 16,
    SpvRayFlagsCullFrontFacingTrianglesKhrMask = 32,
    SpvRayFlagsCullOpaqueKhrMask = 64,
    SpvRayFlagsCullNoOpaqueKhrMask = 128,
    SpvRayFlagsSkipTrianglesKhrMask = 256,
    SpvRayFlagsSkipAabBsKhrMask = 512,
};

SpvRayQueryIntersection_ :: enum i32 {
    SpvRayQueryIntersectionRayQueryCandidateIntersectionKhr = 0,
    SpvRayQueryIntersectionRayQueryCommittedIntersectionKhr = 1,
    SpvRayQueryIntersectionMax = 2147483647,
};

SpvRayQueryCommittedIntersectionType_ :: enum i32 {
    SpvRayQueryCommittedIntersectionTypeRayQueryCommittedIntersectionNoneKhr = 0,
    SpvRayQueryCommittedIntersectionTypeRayQueryCommittedIntersectionTriangleKhr = 1,
    SpvRayQueryCommittedIntersectionTypeRayQueryCommittedIntersectionGeneratedKhr = 2,
    SpvRayQueryCommittedIntersectionTypeMax = 2147483647,
};

SpvRayQueryCandidateIntersectionType_ :: enum i32 {
    SpvRayQueryCandidateIntersectionTypeRayQueryCandidateIntersectionTriangleKhr = 0,
    SpvRayQueryCandidateIntersectionTypeRayQueryCandidateIntersectionAabbkhr = 1,
    SpvRayQueryCandidateIntersectionTypeMax = 2147483647,
};

SpvFragmentShadingRateShift_ :: enum i32 {
    SpvFragmentShadingRateVertical2PixelsShift = 0,
    SpvFragmentShadingRateVertical4PixelsShift = 1,
    SpvFragmentShadingRateHorizontal2PixelsShift = 2,
    SpvFragmentShadingRateHorizontal4PixelsShift = 3,
    SpvFragmentShadingRateMax = 2147483647,
};

SpvFragmentShadingRateMask_ :: enum i32 {
    SpvFragmentShadingRateMaskNone = 0,
    SpvFragmentShadingRateVertical2PixelsMask = 1,
    SpvFragmentShadingRateVertical4PixelsMask = 2,
    SpvFragmentShadingRateHorizontal2PixelsMask = 4,
    SpvFragmentShadingRateHorizontal4PixelsMask = 8,
};

SpvFPDenormMode_ :: enum i32 {
    SpvFpDenormModePreserve = 0,
    SpvFpDenormModeFlushToZero = 1,
    SpvFpDenormModeMax = 2147483647,
};

SpvFPOperationMode_ :: enum i32 {
    SpvFpOperationModeIeee = 0,
    SpvFpOperationModeAlt = 1,
    SpvFpOperationModeMax = 2147483647,
};

SpvQuantizationModes_ :: enum i32 {
    SpvQuantizationModesTrn = 0,
    SpvquantizationmodestrnZero = 1,
    SpvQuantizationModesRnd = 2,
    SpvquantizationmodesrndZero = 3,
    SpvquantizationmodesrndInf = 4,
    SpvquantizationmodesrndMinInf = 5,
    SpvquantizationmodesrndConv = 6,
    SpvquantizationmodesrndConvOdd = 7,
    SpvQuantizationModesMax = 2147483647,
};

SpvOverflowModes_ :: enum i32 {
    SpvOverflowModesWrap = 0,
    SpvOverflowModesSat = 1,
    SpvoverflowmodessatZero = 2,
    SpvoverflowmodessatSym = 3,
    SpvOverflowModesMax = 2147483647,
};

SpvPackedVectorFormat_ :: enum i32 {
    SpvPackedVectorFormatPackedVectorFormat4X8Bit = 0,
    SpvPackedVectorFormatPackedVectorFormat4X8BitKhr = 0,
    SpvPackedVectorFormatMax = 2147483647,
};

SpvOp_ :: enum i32 {
    SpvOpNop = 0,
    SpvOpUndef = 1,
    SpvOpSourceContinued = 2,
    SpvOpSource = 3,
    SpvOpSourceExtension = 4,
    SpvOpName = 5,
    SpvOpMemberName = 6,
    SpvOpString = 7,
    SpvOpLine = 8,
    SpvOpExtension = 10,
    SpvOpExtInstImport = 11,
    SpvOpExtInst = 12,
    SpvOpMemoryModel = 14,
    SpvOpEntryPoint = 15,
    SpvOpExecutionMode = 16,
    SpvOpCapability = 17,
    SpvOpTypeVoid = 19,
    SpvOpTypeBool = 20,
    SpvOpTypeInt = 21,
    SpvOpTypeFloat = 22,
    SpvOpTypeVector = 23,
    SpvOpTypeMatrix = 24,
    SpvOpTypeImage = 25,
    SpvOpTypeSampler = 26,
    SpvOpTypeSampledImage = 27,
    SpvOpTypeArray = 28,
    SpvOpTypeRuntimeArray = 29,
    SpvOpTypeStruct = 30,
    SpvOpTypeOpaque = 31,
    SpvOpTypePointer = 32,
    SpvOpTypeFunction = 33,
    SpvOpTypeEvent = 34,
    SpvOpTypeDeviceEvent = 35,
    SpvOpTypeReserveId = 36,
    SpvOpTypeQueue = 37,
    SpvOpTypePipe = 38,
    SpvOpTypeForwardPointer = 39,
    SpvOpConstantTrue = 41,
    SpvOpConstantFalse = 42,
    SpvOpConstant = 43,
    SpvOpConstantComposite = 44,
    SpvOpConstantSampler = 45,
    SpvOpConstantNull = 46,
    SpvOpSpecConstantTrue = 48,
    SpvOpSpecConstantFalse = 49,
    SpvOpSpecConstant = 50,
    SpvOpSpecConstantComposite = 51,
    SpvOpSpecConstantOp = 52,
    SpvOpFunction = 54,
    SpvOpFunctionParameter = 55,
    SpvOpFunctionEnd = 56,
    SpvOpFunctionCall = 57,
    SpvOpVariable = 59,
    SpvOpImageTexelPointer = 60,
    SpvOpLoad = 61,
    SpvOpStore = 62,
    SpvOpCopyMemory = 63,
    SpvOpCopyMemorySized = 64,
    SpvOpAccessChain = 65,
    SpvOpInBoundsAccessChain = 66,
    SpvOpPtrAccessChain = 67,
    SpvOpArrayLength = 68,
    SpvOpGenericPtrMemSemantics = 69,
    SpvOpInBoundsPtrAccessChain = 70,
    SpvOpDecorate = 71,
    SpvOpMemberDecorate = 72,
    SpvOpDecorationGroup = 73,
    SpvOpGroupDecorate = 74,
    SpvOpGroupMemberDecorate = 75,
    SpvOpVectorExtractDynamic = 77,
    SpvOpVectorInsertDynamic = 78,
    SpvOpVectorShuffle = 79,
    SpvOpCompositeConstruct = 80,
    SpvOpCompositeExtract = 81,
    SpvOpCompositeInsert = 82,
    SpvOpCopyObject = 83,
    SpvOpTranspose = 84,
    SpvOpSampledImage = 86,
    SpvOpImageSampleImplicitLod = 87,
    SpvOpImageSampleExplicitLod = 88,
    SpvOpImageSampleDrefImplicitLod = 89,
    SpvOpImageSampleDrefExplicitLod = 90,
    SpvOpImageSampleProjImplicitLod = 91,
    SpvOpImageSampleProjExplicitLod = 92,
    SpvOpImageSampleProjDrefImplicitLod = 93,
    SpvOpImageSampleProjDrefExplicitLod = 94,
    SpvOpImageFetch = 95,
    SpvOpImageGather = 96,
    SpvOpImageDrefGather = 97,
    SpvOpImageRead = 98,
    SpvOpImageWrite = 99,
    SpvOpImage = 100,
    SpvOpImageQueryFormat = 101,
    SpvOpImageQueryOrder = 102,
    SpvOpImageQuerySizeLod = 103,
    SpvOpImageQuerySize = 104,
    SpvOpImageQueryLod = 105,
    SpvOpImageQueryLevels = 106,
    SpvOpImageQuerySamples = 107,
    SpvOpConvertFToU = 109,
    SpvOpConvertFToS = 110,
    SpvOpConvertSToF = 111,
    SpvOpConvertUToF = 112,
    SpvOpUConvert = 113,
    SpvOpSConvert = 114,
    SpvOpFConvert = 115,
    SpvOpQuantizeToF16 = 116,
    SpvOpConvertPtrToU = 117,
    SpvOpSatConvertSToU = 118,
    SpvOpSatConvertUToS = 119,
    SpvOpConvertUToPtr = 120,
    SpvOpPtrCastToGeneric = 121,
    SpvOpGenericCastToPtr = 122,
    SpvOpGenericCastToPtrExplicit = 123,
    SpvOpBitcast = 124,
    SpvOpSNegate = 126,
    SpvOpFNegate = 127,
    SpvOpIAdd = 128,
    SpvOpFAdd = 129,
    SpvOpISub = 130,
    SpvOpFSub = 131,
    SpvOpIMul = 132,
    SpvOpFMul = 133,
    SpvOpUDiv = 134,
    SpvOpSDiv = 135,
    SpvOpFDiv = 136,
    SpvOpUMod = 137,
    SpvOpSRem = 138,
    SpvOpSMod = 139,
    SpvOpFRem = 140,
    SpvOpFMod = 141,
    SpvOpVectorTimesScalar = 142,
    SpvOpMatrixTimesScalar = 143,
    SpvOpVectorTimesMatrix = 144,
    SpvOpMatrixTimesVector = 145,
    SpvOpMatrixTimesMatrix = 146,
    SpvOpOuterProduct = 147,
    SpvOpDot = 148,
    SpvOpIAddCarry = 149,
    SpvOpISubBorrow = 150,
    SpvOpUMulExtended = 151,
    SpvOpSMulExtended = 152,
    SpvOpAny = 154,
    SpvOpAll = 155,
    SpvOpIsNan = 156,
    SpvOpIsInf = 157,
    SpvOpIsFinite = 158,
    SpvOpIsNormal = 159,
    SpvOpSignBitSet = 160,
    SpvOpLessOrGreater = 161,
    SpvOpOrdered = 162,
    SpvOpUnordered = 163,
    SpvOpLogicalEqual = 164,
    SpvOpLogicalNotEqual = 165,
    SpvOpLogicalOr = 166,
    SpvOpLogicalAnd = 167,
    SpvOpLogicalNot = 168,
    SpvOpSelect = 169,
    SpvOpIEqual = 170,
    SpvOpINotEqual = 171,
    SpvOpUGreaterThan = 172,
    SpvOpSGreaterThan = 173,
    SpvOpUGreaterThanEqual = 174,
    SpvOpSGreaterThanEqual = 175,
    SpvOpULessThan = 176,
    SpvOpSLessThan = 177,
    SpvOpULessThanEqual = 178,
    SpvOpSLessThanEqual = 179,
    SpvOpFOrdEqual = 180,
    SpvOpFUnordEqual = 181,
    SpvOpFOrdNotEqual = 182,
    SpvOpFUnordNotEqual = 183,
    SpvOpFOrdLessThan = 184,
    SpvOpFUnordLessThan = 185,
    SpvOpFOrdGreaterThan = 186,
    SpvOpFUnordGreaterThan = 187,
    SpvOpFOrdLessThanEqual = 188,
    SpvOpFUnordLessThanEqual = 189,
    SpvOpFOrdGreaterThanEqual = 190,
    SpvOpFUnordGreaterThanEqual = 191,
    SpvOpShiftRightLogical = 194,
    SpvOpShiftRightArithmetic = 195,
    SpvOpShiftLeftLogical = 196,
    SpvOpBitwiseOr = 197,
    SpvOpBitwiseXor = 198,
    SpvOpBitwiseAnd = 199,
    SpvOpNot = 200,
    SpvOpBitFieldInsert = 201,
    SpvOpBitFieldSExtract = 202,
    SpvOpBitFieldUExtract = 203,
    SpvOpBitReverse = 204,
    SpvOpBitCount = 205,
    SpvOpDPdx = 207,
    SpvOpDPdy = 208,
    SpvOpFwidth = 209,
    SpvOpDPdxFine = 210,
    SpvOpDPdyFine = 211,
    SpvOpFwidthFine = 212,
    SpvOpDPdxCoarse = 213,
    SpvOpDPdyCoarse = 214,
    SpvOpFwidthCoarse = 215,
    SpvOpEmitVertex = 218,
    SpvOpEndPrimitive = 219,
    SpvOpEmitStreamVertex = 220,
    SpvOpEndStreamPrimitive = 221,
    SpvOpControlBarrier = 224,
    SpvOpMemoryBarrier = 225,
    SpvOpAtomicLoad = 227,
    SpvOpAtomicStore = 228,
    SpvOpAtomicExchange = 229,
    SpvOpAtomicCompareExchange = 230,
    SpvOpAtomicCompareExchangeWeak = 231,
    SpvOpAtomicIIncrement = 232,
    SpvOpAtomicIDecrement = 233,
    SpvOpAtomicIAdd = 234,
    SpvOpAtomicISub = 235,
    SpvOpAtomicSMin = 236,
    SpvOpAtomicUMin = 237,
    SpvOpAtomicSMax = 238,
    SpvOpAtomicUMax = 239,
    SpvOpAtomicAnd = 240,
    SpvOpAtomicOr = 241,
    SpvOpAtomicXor = 242,
    SpvOpPhi = 245,
    SpvOpLoopMerge = 246,
    SpvOpSelectionMerge = 247,
    SpvOpLabel = 248,
    SpvOpBranch = 249,
    SpvOpBranchConditional = 250,
    SpvOpSwitch = 251,
    SpvOpKill = 252,
    SpvOpReturn = 253,
    SpvOpReturnValue = 254,
    SpvOpUnreachable = 255,
    SpvOpLifetimeStart = 256,
    SpvOpLifetimeStop = 257,
    SpvOpGroupAsyncCopy = 259,
    SpvOpGroupWaitEvents = 260,
    SpvOpGroupAll = 261,
    SpvOpGroupAny = 262,
    SpvOpGroupBroadcast = 263,
    SpvOpGroupIAdd = 264,
    SpvOpGroupFAdd = 265,
    SpvOpGroupFMin = 266,
    SpvOpGroupUMin = 267,
    SpvOpGroupSMin = 268,
    SpvOpGroupFMax = 269,
    SpvOpGroupUMax = 270,
    SpvOpGroupSMax = 271,
    SpvOpReadPipe = 274,
    SpvOpWritePipe = 275,
    SpvOpReservedReadPipe = 276,
    SpvOpReservedWritePipe = 277,
    SpvOpReserveReadPipePackets = 278,
    SpvOpReserveWritePipePackets = 279,
    SpvOpCommitReadPipe = 280,
    SpvOpCommitWritePipe = 281,
    SpvOpIsValidReserveId = 282,
    SpvOpGetNumPipePackets = 283,
    SpvOpGetMaxPipePackets = 284,
    SpvOpGroupReserveReadPipePackets = 285,
    SpvOpGroupReserveWritePipePackets = 286,
    SpvOpGroupCommitReadPipe = 287,
    SpvOpGroupCommitWritePipe = 288,
    SpvOpEnqueueMarker = 291,
    SpvOpEnqueueKernel = 292,
    SpvOpGetKernelNDrangeSubGroupCount = 293,
    SpvOpGetKernelNDrangeMaxSubGroupSize = 294,
    SpvOpGetKernelWorkGroupSize = 295,
    SpvOpGetKernelPreferredWorkGroupSizeMultiple = 296,
    SpvOpRetainEvent = 297,
    SpvOpReleaseEvent = 298,
    SpvOpCreateUserEvent = 299,
    SpvOpIsValidEvent = 300,
    SpvOpSetUserEventStatus = 301,
    SpvOpCaptureEventProfilingInfo = 302,
    SpvOpGetDefaultQueue = 303,
    SpvOpBuildNdRange = 304,
    SpvOpImageSparseSampleImplicitLod = 305,
    SpvOpImageSparseSampleExplicitLod = 306,
    SpvOpImageSparseSampleDrefImplicitLod = 307,
    SpvOpImageSparseSampleDrefExplicitLod = 308,
    SpvOpImageSparseSampleProjImplicitLod = 309,
    SpvOpImageSparseSampleProjExplicitLod = 310,
    SpvOpImageSparseSampleProjDrefImplicitLod = 311,
    SpvOpImageSparseSampleProjDrefExplicitLod = 312,
    SpvOpImageSparseFetch = 313,
    SpvOpImageSparseGather = 314,
    SpvOpImageSparseDrefGather = 315,
    SpvOpImageSparseTexelsResident = 316,
    SpvOpNoLine = 317,
    SpvOpAtomicFlagTestAndSet = 318,
    SpvOpAtomicFlagClear = 319,
    SpvOpImageSparseRead = 320,
    SpvOpSizeOf = 321,
    SpvOpTypePipeStorage = 322,
    SpvOpConstantPipeStorage = 323,
    SpvOpCreatePipeFromPipeStorage = 324,
    SpvOpGetKernelLocalSizeForSubgroupCount = 325,
    SpvOpGetKernelMaxNumSubgroups = 326,
    SpvOpTypeNamedBarrier = 327,
    SpvOpNamedBarrierInitialize = 328,
    SpvOpMemoryNamedBarrier = 329,
    SpvOpModuleProcessed = 330,
    SpvOpExecutionModeId = 331,
    SpvOpDecorateId = 332,
    SpvOpGroupNonUniformElect = 333,
    SpvOpGroupNonUniformAll = 334,
    SpvOpGroupNonUniformAny = 335,
    SpvOpGroupNonUniformAllEqual = 336,
    SpvOpGroupNonUniformBroadcast = 337,
    SpvOpGroupNonUniformBroadcastFirst = 338,
    SpvOpGroupNonUniformBallot = 339,
    SpvOpGroupNonUniformInverseBallot = 340,
    SpvOpGroupNonUniformBallotBitExtract = 341,
    SpvOpGroupNonUniformBallotBitCount = 342,
    SpvOpGroupNonUniformBallotFindLsb = 343,
    SpvOpGroupNonUniformBallotFindMsb = 344,
    SpvOpGroupNonUniformShuffle = 345,
    SpvOpGroupNonUniformShuffleXor = 346,
    SpvOpGroupNonUniformShuffleUp = 347,
    SpvOpGroupNonUniformShuffleDown = 348,
    SpvOpGroupNonUniformIAdd = 349,
    SpvOpGroupNonUniformFAdd = 350,
    SpvOpGroupNonUniformIMul = 351,
    SpvOpGroupNonUniformFMul = 352,
    SpvOpGroupNonUniformSMin = 353,
    SpvOpGroupNonUniformUMin = 354,
    SpvOpGroupNonUniformFMin = 355,
    SpvOpGroupNonUniformSMax = 356,
    SpvOpGroupNonUniformUMax = 357,
    SpvOpGroupNonUniformFMax = 358,
    SpvOpGroupNonUniformBitwiseAnd = 359,
    SpvOpGroupNonUniformBitwiseOr = 360,
    SpvOpGroupNonUniformBitwiseXor = 361,
    SpvOpGroupNonUniformLogicalAnd = 362,
    SpvOpGroupNonUniformLogicalOr = 363,
    SpvOpGroupNonUniformLogicalXor = 364,
    SpvOpGroupNonUniformQuadBroadcast = 365,
    SpvOpGroupNonUniformQuadSwap = 366,
    SpvOpCopyLogical = 400,
    SpvOpPtrEqual = 401,
    SpvOpPtrNotEqual = 402,
    SpvOpPtrDiff = 403,
    SpvOpTerminateInvocation = 4416,
    SpvOpSubgroupBallotKhr = 4421,
    SpvOpSubgroupFirstInvocationKhr = 4422,
    SpvOpSubgroupAllKhr = 4428,
    SpvOpSubgroupAnyKhr = 4429,
    SpvOpSubgroupAllEqualKhr = 4430,
    SpvOpGroupNonUniformRotateKhr = 4431,
    SpvOpSubgroupReadInvocationKhr = 4432,
    SpvOpTraceRayKhr = 4445,
    SpvOpExecuteCallableKhr = 4446,
    SpvOpConvertUToAccelerationStructureKhr = 4447,
    SpvOpIgnoreIntersectionKhr = 4448,
    SpvOpTerminateRayKhr = 4449,
    SpvOpSDot = 4450,
    SpvOpSDotKhr = 4450,
    SpvOpUDot = 4451,
    SpvOpUDotKhr = 4451,
    SpvOpSuDot = 4452,
    SpvOpSuDotKhr = 4452,
    SpvOpSDotAccSat = 4453,
    SpvOpSDotAccSatKhr = 4453,
    SpvOpUDotAccSat = 4454,
    SpvOpUDotAccSatKhr = 4454,
    SpvOpSuDotAccSat = 4455,
    SpvOpSuDotAccSatKhr = 4455,
    SpvOpTypeRayQueryKhr = 4472,
    SpvOpRayQueryInitializeKhr = 4473,
    SpvOpRayQueryTerminateKhr = 4474,
    SpvOpRayQueryGenerateIntersectionKhr = 4475,
    SpvOpRayQueryConfirmIntersectionKhr = 4476,
    SpvOpRayQueryProceedKhr = 4477,
    SpvOpRayQueryGetIntersectionTypeKhr = 4479,
    SpvOpGroupIAddNonUniformAmd = 5000,
    SpvOpGroupFAddNonUniformAmd = 5001,
    SpvOpGroupFMinNonUniformAmd = 5002,
    SpvOpGroupUMinNonUniformAmd = 5003,
    SpvOpGroupSMinNonUniformAmd = 5004,
    SpvOpGroupFMaxNonUniformAmd = 5005,
    SpvOpGroupUMaxNonUniformAmd = 5006,
    SpvOpGroupSMaxNonUniformAmd = 5007,
    SpvOpFragmentMaskFetchAmd = 5011,
    SpvOpFragmentFetchAmd = 5012,
    SpvOpReadClockKhr = 5056,
    SpvOpImageSampleFootprintNv = 5283,
    SpvOpGroupNonUniformPartitionNv = 5296,
    SpvOpWritePackedPrimitiveIndices4X8Nv = 5299,
    SpvOpReportIntersectionKhr = 5334,
    SpvOpReportIntersectionNv = 5334,
    SpvOpIgnoreIntersectionNv = 5335,
    SpvOpTerminateRayNv = 5336,
    SpvOpTraceNv = 5337,
    SpvOpTraceMotionNv = 5338,
    SpvOpTraceRayMotionNv = 5339,
    SpvOpTypeAccelerationStructureKhr = 5341,
    SpvOpTypeAccelerationStructureNv = 5341,
    SpvOpExecuteCallableNv = 5344,
    SpvOpTypeCooperativeMatrixNv = 5358,
    SpvOpCooperativeMatrixLoadNv = 5359,
    SpvOpCooperativeMatrixStoreNv = 5360,
    SpvOpCooperativeMatrixMulAddNv = 5361,
    SpvOpCooperativeMatrixLengthNv = 5362,
    SpvOpBeginInvocationInterlockExt = 5364,
    SpvOpEndInvocationInterlockExt = 5365,
    SpvOpDemoteToHelperInvocation = 5380,
    SpvOpDemoteToHelperInvocationExt = 5380,
    SpvOpIsHelperInvocationExt = 5381,
    SpvOpConvertUToImageNv = 5391,
    SpvOpConvertUToSamplerNv = 5392,
    SpvOpConvertImageToUnv = 5393,
    SpvOpConvertSamplerToUnv = 5394,
    SpvOpConvertUToSampledImageNv = 5395,
    SpvOpConvertSampledImageToUnv = 5396,
    SpvOpSamplerImageAddressingModeNv = 5397,
    SpvOpSubgroupShuffleIntel = 5571,
    SpvOpSubgroupShuffleDownIntel = 5572,
    SpvOpSubgroupShuffleUpIntel = 5573,
    SpvOpSubgroupShuffleXorIntel = 5574,
    SpvOpSubgroupBlockReadIntel = 5575,
    SpvOpSubgroupBlockWriteIntel = 5576,
    SpvOpSubgroupImageBlockReadIntel = 5577,
    SpvOpSubgroupImageBlockWriteIntel = 5578,
    SpvOpSubgroupImageMediaBlockReadIntel = 5580,
    SpvOpSubgroupImageMediaBlockWriteIntel = 5581,
    SpvOpUCountLeadingZerosIntel = 5585,
    SpvOpUCountTrailingZerosIntel = 5586,
    SpvOpAbsISubIntel = 5587,
    SpvOpAbsUSubIntel = 5588,
    SpvOpIAddSatIntel = 5589,
    SpvOpUAddSatIntel = 5590,
    SpvOpIAverageIntel = 5591,
    SpvOpUAverageIntel = 5592,
    SpvOpIAverageRoundedIntel = 5593,
    SpvOpUAverageRoundedIntel = 5594,
    SpvOpISubSatIntel = 5595,
    SpvOpUSubSatIntel = 5596,
    SpvOpIMul32X16Intel = 5597,
    SpvOpUMul32X16Intel = 5598,
    SpvOpConstantFunctionPointerIntel = 5600,
    SpvOpFunctionPointerCallIntel = 5601,
    SpvOpAsmTargetIntel = 5609,
    SpvOpAsmIntel = 5610,
    SpvOpAsmCallIntel = 5611,
    SpvOpAtomicFMinExt = 5614,
    SpvOpAtomicFMaxExt = 5615,
    SpvOpAssumeTrueKhr = 5630,
    SpvOpExpectKhr = 5631,
    SpvOpDecorateString = 5632,
    SpvOpDecorateStringGoogle = 5632,
    SpvOpMemberDecorateString = 5633,
    SpvOpMemberDecorateStringGoogle = 5633,
    SpvOpVmeImageIntel = 5699,
    SpvOpTypeVmeImageIntel = 5700,
    SpvOpTypeAvcImePayloadIntel = 5701,
    SpvOpTypeAvcRefPayloadIntel = 5702,
    SpvOpTypeAvcSicPayloadIntel = 5703,
    SpvOpTypeAvcMcePayloadIntel = 5704,
    SpvOpTypeAvcMceResultIntel = 5705,
    SpvOpTypeAvcImeResultIntel = 5706,
    SpvOpTypeAvcImeResultSingleReferenceStreamoutIntel = 5707,
    SpvOpTypeAvcImeResultDualReferenceStreamoutIntel = 5708,
    SpvOpTypeAvcImeSingleReferenceStreaminIntel = 5709,
    SpvOpTypeAvcImeDualReferenceStreaminIntel = 5710,
    SpvOpTypeAvcRefResultIntel = 5711,
    SpvOpTypeAvcSicResultIntel = 5712,
    SpvOpSubgroupAvcMceGetDefaultInterBaseMultiReferencePenaltyIntel = 5713,
    SpvOpSubgroupAvcMceSetInterBaseMultiReferencePenaltyIntel = 5714,
    SpvOpSubgroupAvcMceGetDefaultInterShapePenaltyIntel = 5715,
    SpvOpSubgroupAvcMceSetInterShapePenaltyIntel = 5716,
    SpvOpSubgroupAvcMceGetDefaultInterDirectionPenaltyIntel = 5717,
    SpvOpSubgroupAvcMceSetInterDirectionPenaltyIntel = 5718,
    SpvOpSubgroupAvcMceGetDefaultIntraLumaShapePenaltyIntel = 5719,
    SpvOpSubgroupAvcMceGetDefaultInterMotionVectorCostTableIntel = 5720,
    SpvOpSubgroupAvcMceGetDefaultHighPenaltyCostTableIntel = 5721,
    SpvOpSubgroupAvcMceGetDefaultMediumPenaltyCostTableIntel = 5722,
    SpvOpSubgroupAvcMceGetDefaultLowPenaltyCostTableIntel = 5723,
    SpvOpSubgroupAvcMceSetMotionVectorCostFunctionIntel = 5724,
    SpvOpSubgroupAvcMceGetDefaultIntraLumaModePenaltyIntel = 5725,
    SpvOpSubgroupAvcMceGetDefaultNonDcLumaIntraPenaltyIntel = 5726,
    SpvOpSubgroupAvcMceGetDefaultIntraChromaModeBasePenaltyIntel = 5727,
    SpvOpSubgroupAvcMceSetAcOnlyHaarIntel = 5728,
    SpvOpSubgroupAvcMceSetSourceInterlacedFieldPolarityIntel = 5729,
    SpvOpSubgroupAvcMceSetSingleReferenceInterlacedFieldPolarityIntel = 5730,
    SpvOpSubgroupAvcMceSetDualReferenceInterlacedFieldPolaritiesIntel = 5731,
    SpvOpSubgroupAvcMceConvertToImePayloadIntel = 5732,
    SpvOpSubgroupAvcMceConvertToImeResultIntel = 5733,
    SpvOpSubgroupAvcMceConvertToRefPayloadIntel = 5734,
    SpvOpSubgroupAvcMceConvertToRefResultIntel = 5735,
    SpvOpSubgroupAvcMceConvertToSicPayloadIntel = 5736,
    SpvOpSubgroupAvcMceConvertToSicResultIntel = 5737,
    SpvOpSubgroupAvcMceGetMotionVectorsIntel = 5738,
    SpvOpSubgroupAvcMceGetInterDistortionsIntel = 5739,
    SpvOpSubgroupAvcMceGetBestInterDistortionsIntel = 5740,
    SpvOpSubgroupAvcMceGetInterMajorShapeIntel = 5741,
    SpvOpSubgroupAvcMceGetInterMinorShapeIntel = 5742,
    SpvOpSubgroupAvcMceGetInterDirectionsIntel = 5743,
    SpvOpSubgroupAvcMceGetInterMotionVectorCountIntel = 5744,
    SpvOpSubgroupAvcMceGetInterReferenceIdsIntel = 5745,
    SpvOpSubgroupAvcMceGetInterReferenceInterlacedFieldPolaritiesIntel = 5746,
    SpvOpSubgroupAvcImeInitializeIntel = 5747,
    SpvOpSubgroupAvcImeSetSingleReferenceIntel = 5748,
    SpvOpSubgroupAvcImeSetDualReferenceIntel = 5749,
    SpvOpSubgroupAvcImeRefWindowSizeIntel = 5750,
    SpvOpSubgroupAvcImeAdjustRefOffsetIntel = 5751,
    SpvOpSubgroupAvcImeConvertToMcePayloadIntel = 5752,
    SpvOpSubgroupAvcImeSetMaxMotionVectorCountIntel = 5753,
    SpvOpSubgroupAvcImeSetUnidirectionalMixDisableIntel = 5754,
    SpvOpSubgroupAvcImeSetEarlySearchTerminationThresholdIntel = 5755,
    SpvOpSubgroupAvcImeSetWeightedSadIntel = 5756,
    SpvOpSubgroupAvcImeEvaluateWithSingleReferenceIntel = 5757,
    SpvOpSubgroupAvcImeEvaluateWithDualReferenceIntel = 5758,
    SpvOpSubgroupAvcImeEvaluateWithSingleReferenceStreaminIntel = 5759,
    SpvOpSubgroupAvcImeEvaluateWithDualReferenceStreaminIntel = 5760,
    SpvOpSubgroupAvcImeEvaluateWithSingleReferenceStreamoutIntel = 5761,
    SpvOpSubgroupAvcImeEvaluateWithDualReferenceStreamoutIntel = 5762,
    SpvOpSubgroupAvcImeEvaluateWithSingleReferenceStreaminoutIntel = 5763,
    SpvOpSubgroupAvcImeEvaluateWithDualReferenceStreaminoutIntel = 5764,
    SpvOpSubgroupAvcImeConvertToMceResultIntel = 5765,
    SpvOpSubgroupAvcImeGetSingleReferenceStreaminIntel = 5766,
    SpvOpSubgroupAvcImeGetDualReferenceStreaminIntel = 5767,
    SpvOpSubgroupAvcImeStripSingleReferenceStreamoutIntel = 5768,
    SpvOpSubgroupAvcImeStripDualReferenceStreamoutIntel = 5769,
    SpvOpSubgroupAvcImeGetStreamoutSingleReferenceMajorShapeMotionVectorsIntel = 5770,
    SpvOpSubgroupAvcImeGetStreamoutSingleReferenceMajorShapeDistortionsIntel = 5771,
    SpvOpSubgroupAvcImeGetStreamoutSingleReferenceMajorShapeReferenceIdsIntel = 5772,
    SpvOpSubgroupAvcImeGetStreamoutDualReferenceMajorShapeMotionVectorsIntel = 5773,
    SpvOpSubgroupAvcImeGetStreamoutDualReferenceMajorShapeDistortionsIntel = 5774,
    SpvOpSubgroupAvcImeGetStreamoutDualReferenceMajorShapeReferenceIdsIntel = 5775,
    SpvOpSubgroupAvcImeGetBorderReachedIntel = 5776,
    SpvOpSubgroupAvcImeGetTruncatedSearchIndicationIntel = 5777,
    SpvOpSubgroupAvcImeGetUnidirectionalEarlySearchTerminationIntel = 5778,
    SpvOpSubgroupAvcImeGetWeightingPatternMinimumMotionVectorIntel = 5779,
    SpvOpSubgroupAvcImeGetWeightingPatternMinimumDistortionIntel = 5780,
    SpvOpSubgroupAvcFmeInitializeIntel = 5781,
    SpvOpSubgroupAvcBmeInitializeIntel = 5782,
    SpvOpSubgroupAvcRefConvertToMcePayloadIntel = 5783,
    SpvOpSubgroupAvcRefSetBidirectionalMixDisableIntel = 5784,
    SpvOpSubgroupAvcRefSetBilinearFilterEnableIntel = 5785,
    SpvOpSubgroupAvcRefEvaluateWithSingleReferenceIntel = 5786,
    SpvOpSubgroupAvcRefEvaluateWithDualReferenceIntel = 5787,
    SpvOpSubgroupAvcRefEvaluateWithMultiReferenceIntel = 5788,
    SpvOpSubgroupAvcRefEvaluateWithMultiReferenceInterlacedIntel = 5789,
    SpvOpSubgroupAvcRefConvertToMceResultIntel = 5790,
    SpvOpSubgroupAvcSicInitializeIntel = 5791,
    SpvOpSubgroupAvcSicConfigureSkcIntel = 5792,
    SpvOpSubgroupAvcSicConfigureIpeLumaIntel = 5793,
    SpvOpSubgroupAvcSicConfigureIpeLumaChromaIntel = 5794,
    SpvOpSubgroupAvcSicGetMotionVectorMaskIntel = 5795,
    SpvOpSubgroupAvcSicConvertToMcePayloadIntel = 5796,
    SpvOpSubgroupAvcSicSetIntraLumaShapePenaltyIntel = 5797,
    SpvOpSubgroupAvcSicSetIntraLumaModeCostFunctionIntel = 5798,
    SpvOpSubgroupAvcSicSetIntraChromaModeCostFunctionIntel = 5799,
    SpvOpSubgroupAvcSicSetBilinearFilterEnableIntel = 5800,
    SpvOpSubgroupAvcSicSetSkcForwardTransformEnableIntel = 5801,
    SpvOpSubgroupAvcSicSetBlockBasedRawSkipSadIntel = 5802,
    SpvOpSubgroupAvcSicEvaluateIpeIntel = 5803,
    SpvOpSubgroupAvcSicEvaluateWithSingleReferenceIntel = 5804,
    SpvOpSubgroupAvcSicEvaluateWithDualReferenceIntel = 5805,
    SpvOpSubgroupAvcSicEvaluateWithMultiReferenceIntel = 5806,
    SpvOpSubgroupAvcSicEvaluateWithMultiReferenceInterlacedIntel = 5807,
    SpvOpSubgroupAvcSicConvertToMceResultIntel = 5808,
    SpvOpSubgroupAvcSicGetIpeLumaShapeIntel = 5809,
    SpvOpSubgroupAvcSicGetBestIpeLumaDistortionIntel = 5810,
    SpvOpSubgroupAvcSicGetBestIpeChromaDistortionIntel = 5811,
    SpvOpSubgroupAvcSicGetPackedIpeLumaModesIntel = 5812,
    SpvOpSubgroupAvcSicGetIpeChromaModeIntel = 5813,
    SpvOpSubgroupAvcSicGetPackedSkcLumaCountThresholdIntel = 5814,
    SpvOpSubgroupAvcSicGetPackedSkcLumaSumThresholdIntel = 5815,
    SpvOpSubgroupAvcSicGetInterRawSadsIntel = 5816,
    SpvOpVariableLengthArrayIntel = 5818,
    SpvOpSaveMemoryIntel = 5819,
    SpvOpRestoreMemoryIntel = 5820,
    SpvOpArbitraryFloatSinCosPiIntel = 5840,
    SpvOpArbitraryFloatCastIntel = 5841,
    SpvOpArbitraryFloatCastFromIntIntel = 5842,
    SpvOpArbitraryFloatCastToIntIntel = 5843,
    SpvOpArbitraryFloatAddIntel = 5846,
    SpvOpArbitraryFloatSubIntel = 5847,
    SpvOpArbitraryFloatMulIntel = 5848,
    SpvOpArbitraryFloatDivIntel = 5849,
    SpvOpArbitraryFloatGtintel = 5850,
    SpvOpArbitraryFloatGeintel = 5851,
    SpvOpArbitraryFloatLtintel = 5852,
    SpvOpArbitraryFloatLeintel = 5853,
    SpvOpArbitraryFloatEqintel = 5854,
    SpvOpArbitraryFloatRecipIntel = 5855,
    SpvOpArbitraryFloatRSqrtIntel = 5856,
    SpvOpArbitraryFloatCbrtIntel = 5857,
    SpvOpArbitraryFloatHypotIntel = 5858,
    SpvOpArbitraryFloatSqrtIntel = 5859,
    SpvOpArbitraryFloatLogIntel = 5860,
    SpvOpArbitraryFloatLog2Intel = 5861,
    SpvOpArbitraryFloatLog10Intel = 5862,
    SpvOpArbitraryFloatLog1PIntel = 5863,
    SpvOpArbitraryFloatExpIntel = 5864,
    SpvOpArbitraryFloatExp2Intel = 5865,
    SpvOpArbitraryFloatExp10Intel = 5866,
    SpvOpArbitraryFloatExpm1Intel = 5867,
    SpvOpArbitraryFloatSinIntel = 5868,
    SpvOpArbitraryFloatCosIntel = 5869,
    SpvOpArbitraryFloatSinCosIntel = 5870,
    SpvOpArbitraryFloatSinPiIntel = 5871,
    SpvOpArbitraryFloatCosPiIntel = 5872,
    SpvOpArbitraryFloatASinIntel = 5873,
    SpvOpArbitraryFloatASinPiIntel = 5874,
    SpvOpArbitraryFloatACosIntel = 5875,
    SpvOpArbitraryFloatACosPiIntel = 5876,
    SpvOpArbitraryFloatATanIntel = 5877,
    SpvOpArbitraryFloatATanPiIntel = 5878,
    SpvOpArbitraryFloatATan2Intel = 5879,
    SpvOpArbitraryFloatPowIntel = 5880,
    SpvOpArbitraryFloatPowRintel = 5881,
    SpvOpArbitraryFloatPowNintel = 5882,
    SpvOpLoopControlIntel = 5887,
    SpvOpAliasDomainDeclIntel = 5911,
    SpvOpAliasScopeDeclIntel = 5912,
    SpvOpAliasScopeListDeclIntel = 5913,
    SpvOpFixedSqrtIntel = 5923,
    SpvOpFixedRecipIntel = 5924,
    SpvOpFixedRsqrtIntel = 5925,
    SpvOpFixedSinIntel = 5926,
    SpvOpFixedCosIntel = 5927,
    SpvOpFixedSinCosIntel = 5928,
    SpvOpFixedSinPiIntel = 5929,
    SpvOpFixedCosPiIntel = 5930,
    SpvOpFixedSinCosPiIntel = 5931,
    SpvOpFixedLogIntel = 5932,
    SpvOpFixedExpIntel = 5933,
    SpvOpPtrCastToCrossWorkgroupIntel = 5934,
    SpvOpCrossWorkgroupCastToPtrIntel = 5938,
    SpvOpReadPipeBlockingIntel = 5946,
    SpvOpWritePipeBlockingIntel = 5947,
    SpvOpFpgaRegIntel = 5949,
    SpvOpRayQueryGetRayTMinKhr = 6016,
    SpvOpRayQueryGetRayFlagsKhr = 6017,
    SpvOpRayQueryGetIntersectionTkhr = 6018,
    SpvOpRayQueryGetIntersectionInstanceCustomIndexKhr = 6019,
    SpvOpRayQueryGetIntersectionInstanceIdKhr = 6020,
    SpvOpRayQueryGetIntersectionInstanceShaderBindingTableRecordOffsetKhr = 6021,
    SpvOpRayQueryGetIntersectionGeometryIndexKhr = 6022,
    SpvOpRayQueryGetIntersectionPrimitiveIndexKhr = 6023,
    SpvOpRayQueryGetIntersectionBarycentricsKhr = 6024,
    SpvOpRayQueryGetIntersectionFrontFaceKhr = 6025,
    SpvOpRayQueryGetIntersectionCandidateAabbOpaqueKhr = 6026,
    SpvOpRayQueryGetIntersectionObjectRayDirectionKhr = 6027,
    SpvOpRayQueryGetIntersectionObjectRayOriginKhr = 6028,
    SpvOpRayQueryGetWorldRayDirectionKhr = 6029,
    SpvOpRayQueryGetWorldRayOriginKhr = 6030,
    SpvOpRayQueryGetIntersectionObjectToWorldKhr = 6031,
    SpvOpRayQueryGetIntersectionWorldToObjectKhr = 6032,
    SpvOpAtomicFAddExt = 6035,
    SpvOpTypeBufferSurfaceIntel = 6086,
    SpvOpTypeStructContinuedIntel = 6090,
    SpvOpConstantCompositeContinuedIntel = 6091,
    SpvOpSpecConstantCompositeContinuedIntel = 6092,
    SpvOpControlBarrierArriveIntel = 6142,
    SpvOpControlBarrierWaitIntel = 6143,
    SpvOpGroupIMulKhr = 6401,
    SpvOpGroupFMulKhr = 6402,
    SpvOpGroupBitwiseAndKhr = 6403,
    SpvOpGroupBitwiseOrKhr = 6404,
    SpvOpGroupBitwiseXorKhr = 6405,
    SpvOpGroupLogicalAndKhr = 6406,
    SpvOpGroupLogicalOrKhr = 6407,
    SpvOpGroupLogicalXorKhr = 6408,
    SpvOpMax = 2147483647,
};

SpvReflectResult :: enum i32 {
    Success,
    NotReady,
    ErrorParseFailed,
    ErrorAllocFailed,
    ErrorRangeExceeded,
    ErrorNullPointer,
    ErrorInternalError,
    ErrorCountMismatch,
    ErrorElementNotFound,
    ErrorSpirvInvalidCodeSize,
    ErrorSpirvInvalidMagicNumber,
    ErrorSpirvUnexpectedEof,
    ErrorSpirvInvalidIdReference,
    ErrorSpirvSetNumberOverflow,
    ErrorSpirvInvalidStorageClass,
    ErrorSpirvRecursion,
    ErrorSpirvInvalidInstruction,
    ErrorSpirvUnexpectedBlockData,
    ErrorSpirvInvalidBlockMemberReference,
    ErrorSpirvInvalidEntryPoint,
    ErrorSpirvInvalidExecutionMode,
};

SpvReflectModuleFlagBits :: enum i32 {
    SpvReflectModuleFlagNone = 0,
    SpvReflectModuleFlagNoCopy = 1,
};

SpvReflectTypeFlagBits :: enum i32 {
    SpvReflectTypeFlagUndefined = 0,
    SpvReflectTypeFlagVoid = 1,
    SpvReflectTypeFlagBool = 2,
    SpvReflectTypeFlagInt = 4,
    SpvReflectTypeFlagFloat = 8,
    SpvReflectTypeFlagVector = 256,
    SpvReflectTypeFlagMatrix = 512,
    SpvReflectTypeFlagExternalImage = 65536,
    SpvReflectTypeFlagExternalSampler = 131072,
    SpvReflectTypeFlagExternalSampledImage = 262144,
    SpvReflectTypeFlagExternalBlock = 524288,
    SpvReflectTypeFlagExternalAccelerationStructure = 1048576,
    SpvReflectTypeFlagExternalMask = 16711680,
    SpvReflectTypeFlagStruct = 268435456,
    SpvReflectTypeFlagArray = 536870912,
};

SpvReflectDecorationFlagBits :: enum i32 {
    SpvReflectDecorationNone = 0,
    SpvReflectDecorationBlock = 1,
    SpvReflectDecorationBufferBlock = 2,
    SpvReflectDecorationRowMajor = 4,
    SpvReflectDecorationColumnMajor = 8,
    SpvReflectDecorationBuiltIn = 16,
    SpvReflectDecorationNoperspective = 32,
    SpvReflectDecorationFlat = 64,
    SpvReflectDecorationNonWritable = 128,
    SpvReflectDecorationRelaxedPrecision = 256,
    SpvReflectDecorationNonReadable = 512,
};

SpvReflectResourceType :: enum i32 {
    SpvReflectResourceFlagUndefined = 0,
    SpvReflectResourceFlagSampler = 1,
    SpvReflectResourceFlagCbv = 2,
    SpvReflectResourceFlagSrv = 4,
    SpvReflectResourceFlagUav = 8,
};

SpvReflectFormat :: enum i32 {
    Undefined = 0,
    R32Uint = 98,
    R32Sint = 99,
    R32Sfloat = 100,
    R32G32Uint = 101,
    R32G32Sint = 102,
    R32G32Sfloat = 103,
    R32G32B32Uint = 104,
    R32G32B32Sint = 105,
    R32G32B32Sfloat = 106,
    R32G32B32A32Uint = 107,
    R32G32B32A32Sint = 108,
    R32G32B32A32Sfloat = 109,
    R64Uint = 110,
    R64Sint = 111,
    R64Sfloat = 112,
    R64G64Uint = 113,
    R64G64Sint = 114,
    R64G64Sfloat = 115,
    R64G64B64Uint = 116,
    R64G64B64Sint = 117,
    R64G64B64Sfloat = 118,
    R64G64B64A64Uint = 119,
    R64G64B64A64Sint = 120,
    R64G64B64A64Sfloat = 121,
};

SpvReflectVariableFlagBits :: enum i32 {
    SpvReflectVariableFlagsNone = 0,
    SpvReflectVariableFlagsUnused = 1,
};

SpvReflectDescriptorType :: enum i32 {
    Sampler = 0,
    CombinedImageSampler = 1,
    SampledImage = 2,
    StorageImage = 3,
    UniformTexelBuffer = 4,
    StorageTexelBuffer = 5,
    UniformBuffer = 6,
    StorageBuffer = 7,
    UniformBufferDynamic = 8,
    StorageBufferDynamic = 9,
    InputAttachment = 10,
    AccelerationStructureKhr = 1000150000,
};

SpvReflectShaderStageFlagBits :: enum i32 {
    SpvReflectShaderStageVertexBit = 1,
    SpvReflectShaderStageTessellationControlBit = 2,
    SpvReflectShaderStageTessellationEvaluationBit = 4,
    SpvReflectShaderStageGeometryBit = 8,
    SpvReflectShaderStageFragmentBit = 16,
    SpvReflectShaderStageComputeBit = 32,
    SpvReflectShaderStageTaskBitNv = 64,
    SpvReflectShaderStageMeshBitNv = 128,
    SpvReflectShaderStageRaygenBitKhr = 256,
    SpvReflectShaderStageAnyHitBitKhr = 512,
    SpvReflectShaderStageClosestHitBitKhr = 1024,
    SpvReflectShaderStageMissBitKhr = 2048,
    SpvReflectShaderStageIntersectionBitKhr = 4096,
    SpvReflectShaderStageCallableBitKhr = 8192,
};

SpvReflectGenerator :: enum i32 {
    KhronosLlvmSpirvTranslator = 6,
    KhronosSpirvToolsAssembler = 7,
    KhronosGlslangReferenceFrontEnd = 8,
    GoogleShadercOverGlslang = 13,
    GoogleSpiregg = 14,
    GoogleRspirv = 15,
    X_legendMesaMesairSpirvTranslator = 16,
    KhronosSpirvToolsLinker = 17,
    WineVkd3DShaderCompiler = 18,
    ClayClayShaderCompiler = 19,
};

AnonymousEnum0 :: enum i32 {
    SpvReflectMaxArrayDims = 32,
    SpvReflectMaxDescriptorSets = 64,
};

AnonymousEnum1 :: enum i32 {
    SpvReflectBindingNumberDontChange = -1,
    SpvReflectSetNumberDontChange = -1,
};

Scalar :: struct {
    width : u32,
    signedness : u32,
};

Vector :: struct {
    component_count : u32,
};

Matrix :: struct {
    column_count : u32,
    row_count : u32,
    stride : u32,
};

SpvReflectNumericTraits :: struct {
    scalar : Scalar,
    vector : Vector,
    mat : Matrix,
};

SpvReflectImageTraits :: struct {
    dim : SpvDim,
    depth : u32,
    arrayed : u32,
    ms : u32,
    sampled : u32,
    image_format : SpvImageFormat,
};

SpvReflectArrayTraits :: struct {
    dims_count : u32,
    dims: [SPV_REFLECT_MAX_ARRAY_DIMS]u32,
    spec_constant_op_ids: [SPV_REFLECT_MAX_ARRAY_DIMS]u32,
    stride : u32,
};

SpvReflectBindingArrayTraits :: struct {
    dims_count : u32,
    dims: [SPV_REFLECT_MAX_ARRAY_DIMS]u32,
};

Traits :: struct {
    numeric : SpvReflectNumericTraits,
    image : SpvReflectImageTraits,
    array : SpvReflectArrayTraits,
};

SpvReflectTypeDescription :: struct {
    id : u32,
    op : SpvOp,
    type_name : cstring,
    struct_member_name : cstring,
    storage_class : SpvStorageClass,
    type_flags : u32,
    decoration_flags : u32,
    traits : Traits,
    member_count : u32,
    members : ^SpvReflectTypeDescription,
};

SpvReflectInterfaceVariable :: struct {
    spirv_id : u32,
    name : cstring,
    location : u32,
    storage_class : SpvStorageClass,
    semantic : cstring,
    decoration_flags : u32,
    built_in : SpvBuiltIn,
    numeric : SpvReflectNumericTraits,
    array : SpvReflectArrayTraits,
    member_count : u32,
    members : ^SpvReflectInterfaceVariable,
    format : SpvReflectFormat,
    type_description : ^SpvReflectTypeDescription,
    word_offset : AnonymousStruct0,
};

AnonymousStruct0 :: struct {
    location : u32,
};

SpvReflectBlockVariable :: struct {
    spirv_id : u32,
    name : cstring,
    offset : u32,
    absolute_offset : u32,
    size : u32,
    padded_size : u32,
    decoration_flags : u32,
    numeric : SpvReflectNumericTraits,
    array : SpvReflectArrayTraits,
    flags : u32,
    member_count : u32,
    members : ^SpvReflectBlockVariable,
    type_description : ^SpvReflectTypeDescription,
};

SpvReflectDescriptorBinding :: struct {
    spirv_id : u32,
    name : cstring,
    binding : u32,
    input_attachment_index : u32,
    set : u32,
    descriptor_type : SpvReflectDescriptorType,
    resource_type : SpvReflectResourceType,
    image : SpvReflectImageTraits,
    block : SpvReflectBlockVariable,
    array : SpvReflectBindingArrayTraits,
    count : u32,
    accessed : u32,
    uav_counter_id : u32,
    uav_counter_binding : ^SpvReflectDescriptorBinding,
    type_description : ^SpvReflectTypeDescription,
    word_offset : AnonymousStruct1,
    decoration_flags : u32,
};

AnonymousStruct1 :: struct {
    binding : u32,
    set : u32,
};

SpvReflectDescriptorSet :: struct {
    set : u32,
    binding_count : u32,
    bindings : ^^SpvReflectDescriptorBinding,
};

LocalSize :: struct {
    x : u32,
    y : u32,
    z : u32,
};

SpvReflectEntryPoint :: struct {
    name : cstring,
    id : u32,
    spirv_execution_model : SpvExecutionModel,
    shader_stage : SpvReflectShaderStageFlagBits,
    input_variable_count : u32,
    input_variables : ^^SpvReflectInterfaceVariable,
    output_variable_count : u32,
    output_variables : ^^SpvReflectInterfaceVariable,
    interface_variable_count : u32,
    interface_variables : ^SpvReflectInterfaceVariable,
    descriptor_set_count : u32,
    descriptor_sets : ^SpvReflectDescriptorSet,
    used_uniform_count : u32,
    used_uniforms : ^u32,
    used_push_constant_count : u32,
    used_push_constants : ^u32,
    execution_mode_count : u32,
    execution_modes : ^SpvExecutionMode,
    local_size : LocalSize,
    invocations : u32,
    output_vertices : u32,
};

Internal :: struct {
    module_flags : u32,
    spirv_size : _c.size_t,
    spirv_code : ^u32,
    spirv_word_count : u32,
    type_description_count : _c.size_t,
    type_descriptions : ^SpvReflectTypeDescription,
};

SpvReflectShaderModule :: struct {
    generator : SpvReflectGenerator,
    entry_point_name : cstring,
    entry_point_id : u32,
    entry_point_count : u32,
    entry_points : ^SpvReflectEntryPoint,
    source_language : SpvSourceLanguage,
    source_language_version : u32,
    source_file : cstring,
    source_source : cstring,
    spirv_execution_model : SpvExecutionModel,
    shader_stage : SpvReflectShaderStageFlagBits,
    descriptor_binding_count : u32,
    descriptor_bindings : ^SpvReflectDescriptorBinding,
    descriptor_set_count : u32,
    descriptor_sets: [SPV_REFLECT_MAX_DESCRIPTOR_SETS]SpvReflectDescriptorSet,
    input_variable_count : u32,
    input_variables : ^^SpvReflectInterfaceVariable,
    output_variable_count : u32,
    output_variables : ^^SpvReflectInterfaceVariable,
    interface_variable_count : u32,
    interface_variables : ^SpvReflectInterfaceVariable,
    push_constant_block_count : u32,
    push_constant_blocks : ^SpvReflectBlockVariable,
    internal : ^Internal,
};

@(default_calling_convention="c")
foreign spirv_reflect {

    @(link_name="SpvHasResultAndType")
    spv_has_result_and_type :: proc(opcode : SpvOp, hasResult : ^bool, hasResultType : ^bool) ---;

    @(link_name="spvReflectCreateShaderModule")
    spv_reflect_create_shader_module :: proc(size : _c.size_t, p_code : rawptr, p_module : ^SpvReflectShaderModule) -> SpvReflectResult ---;

    @(link_name="spvReflectCreateShaderModule2")
    spv_reflect_create_shader_module2 :: proc(flags : u32, size : _c.size_t, p_code : rawptr, p_module : ^SpvReflectShaderModule) -> SpvReflectResult ---;

    @(link_name="spvReflectDestroyShaderModule")
    spv_reflect_destroy_shader_module :: proc(p_module : ^SpvReflectShaderModule) ---;

    @(link_name="spvReflectGetCodeSize")
    spv_reflect_get_code_size :: proc(p_module : ^SpvReflectShaderModule) -> u32 ---;

    @(link_name="spvReflectGetCode")
    spv_reflect_get_code :: proc(p_module : ^SpvReflectShaderModule) -> ^u32 ---;

    @(link_name="spvReflectGetEntryPoint")
    spv_reflect_get_entry_point :: proc(p_module : ^SpvReflectShaderModule, entry_point : cstring) -> ^SpvReflectEntryPoint ---;

    @(link_name="spvReflectEnumerateDescriptorBindings")
    spv_reflect_enumerate_descriptor_bindings :: proc(p_module : ^SpvReflectShaderModule, p_count : ^u32, pp_bindings : ^^SpvReflectDescriptorBinding) -> SpvReflectResult ---;

    @(link_name="spvReflectEnumerateEntryPointDescriptorBindings")
    spv_reflect_enumerate_entry_point_descriptor_bindings :: proc(p_module : ^SpvReflectShaderModule, entry_point : cstring, p_count : ^u32, pp_bindings : ^^SpvReflectDescriptorBinding) -> SpvReflectResult ---;

    @(link_name="spvReflectEnumerateDescriptorSets")
    spv_reflect_enumerate_descriptor_sets :: proc(p_module : ^SpvReflectShaderModule, p_count : ^u32, pp_sets : ^^SpvReflectDescriptorSet) -> SpvReflectResult ---;

    @(link_name="spvReflectEnumerateEntryPointDescriptorSets")
    spv_reflect_enumerate_entry_point_descriptor_sets :: proc(p_module : ^SpvReflectShaderModule, entry_point : cstring, p_count : ^u32, pp_sets : ^^SpvReflectDescriptorSet) -> SpvReflectResult ---;

    @(link_name="spvReflectEnumerateInterfaceVariables")
    spv_reflect_enumerate_interface_variables :: proc(p_module : ^SpvReflectShaderModule, p_count : ^u32, pp_variables : ^^SpvReflectInterfaceVariable) -> SpvReflectResult ---;

    @(link_name="spvReflectEnumerateEntryPointInterfaceVariables")
    spv_reflect_enumerate_entry_point_interface_variables :: proc(p_module : ^SpvReflectShaderModule, entry_point : cstring, p_count : ^u32, pp_variables : ^^SpvReflectInterfaceVariable) -> SpvReflectResult ---;

    @(link_name="spvReflectEnumerateInputVariables")
    spv_reflect_enumerate_input_variables :: proc(p_module : ^SpvReflectShaderModule, p_count : ^u32, pp_variables : ^^SpvReflectInterfaceVariable) -> SpvReflectResult ---;

    @(link_name="spvReflectEnumerateEntryPointInputVariables")
    spv_reflect_enumerate_entry_point_input_variables :: proc(p_module : ^SpvReflectShaderModule, entry_point : cstring, p_count : ^u32, pp_variables : ^^SpvReflectInterfaceVariable) -> SpvReflectResult ---;

    @(link_name="spvReflectEnumerateOutputVariables")
    spv_reflect_enumerate_output_variables :: proc(p_module : ^SpvReflectShaderModule, p_count : ^u32, pp_variables : ^^SpvReflectInterfaceVariable) -> SpvReflectResult ---;

    @(link_name="spvReflectEnumerateEntryPointOutputVariables")
    spv_reflect_enumerate_entry_point_output_variables :: proc(p_module : ^SpvReflectShaderModule, entry_point : cstring, p_count : ^u32, pp_variables : ^^SpvReflectInterfaceVariable) -> SpvReflectResult ---;

    @(link_name="spvReflectEnumeratePushConstantBlocks")
    spv_reflect_enumerate_push_constant_blocks :: proc(p_module : ^SpvReflectShaderModule, p_count : ^u32, pp_blocks : ^^SpvReflectBlockVariable) -> SpvReflectResult ---;

    @(link_name="spvReflectEnumerateEntryPointPushConstantBlocks")
    spv_reflect_enumerate_entry_point_push_constant_blocks :: proc(p_module : ^SpvReflectShaderModule, entry_point : cstring, p_count : ^u32, pp_blocks : ^^SpvReflectBlockVariable) -> SpvReflectResult ---;

    @(link_name="spvReflectGetDescriptorBinding")
    spv_reflect_get_descriptor_binding :: proc(p_module : ^SpvReflectShaderModule, binding_number : u32, set_number : u32, p_result : ^SpvReflectResult) -> ^SpvReflectDescriptorBinding ---;

    @(link_name="spvReflectGetEntryPointDescriptorBinding")
    spv_reflect_get_entry_point_descriptor_binding :: proc(p_module : ^SpvReflectShaderModule, entry_point : cstring, binding_number : u32, set_number : u32, p_result : ^SpvReflectResult) -> ^SpvReflectDescriptorBinding ---;

    @(link_name="spvReflectGetDescriptorSet")
    spv_reflect_get_descriptor_set :: proc(p_module : ^SpvReflectShaderModule, set_number : u32, p_result : ^SpvReflectResult) -> ^SpvReflectDescriptorSet ---;

    @(link_name="spvReflectGetEntryPointDescriptorSet")
    spv_reflect_get_entry_point_descriptor_set :: proc(p_module : ^SpvReflectShaderModule, entry_point : cstring, set_number : u32, p_result : ^SpvReflectResult) -> ^SpvReflectDescriptorSet ---;

    @(link_name="spvReflectGetInputVariableByLocation")
    spv_reflect_get_input_variable_by_location :: proc(p_module : ^SpvReflectShaderModule, location : u32, p_result : ^SpvReflectResult) -> ^SpvReflectInterfaceVariable ---;

    @(link_name="spvReflectGetEntryPointInputVariableByLocation")
    spv_reflect_get_entry_point_input_variable_by_location :: proc(p_module : ^SpvReflectShaderModule, entry_point : cstring, location : u32, p_result : ^SpvReflectResult) -> ^SpvReflectInterfaceVariable ---;

    @(link_name="spvReflectGetInputVariableBySemantic")
    spv_reflect_get_input_variable_by_semantic :: proc(p_module : ^SpvReflectShaderModule, semantic : cstring, p_result : ^SpvReflectResult) -> ^SpvReflectInterfaceVariable ---;

    @(link_name="spvReflectGetEntryPointInputVariableBySemantic")
    spv_reflect_get_entry_point_input_variable_by_semantic :: proc(p_module : ^SpvReflectShaderModule, entry_point : cstring, semantic : cstring, p_result : ^SpvReflectResult) -> ^SpvReflectInterfaceVariable ---;

    @(link_name="spvReflectGetOutputVariableByLocation")
    spv_reflect_get_output_variable_by_location :: proc(p_module : ^SpvReflectShaderModule, location : u32, p_result : ^SpvReflectResult) -> ^SpvReflectInterfaceVariable ---;

    @(link_name="spvReflectGetEntryPointOutputVariableByLocation")
    spv_reflect_get_entry_point_output_variable_by_location :: proc(p_module : ^SpvReflectShaderModule, entry_point : cstring, location : u32, p_result : ^SpvReflectResult) -> ^SpvReflectInterfaceVariable ---;

    @(link_name="spvReflectGetOutputVariableBySemantic")
    spv_reflect_get_output_variable_by_semantic :: proc(p_module : ^SpvReflectShaderModule, semantic : cstring, p_result : ^SpvReflectResult) -> ^SpvReflectInterfaceVariable ---;

    @(link_name="spvReflectGetEntryPointOutputVariableBySemantic")
    spv_reflect_get_entry_point_output_variable_by_semantic :: proc(p_module : ^SpvReflectShaderModule, entry_point : cstring, semantic : cstring, p_result : ^SpvReflectResult) -> ^SpvReflectInterfaceVariable ---;

    @(link_name="spvReflectGetPushConstantBlock")
    spv_reflect_get_push_constant_block :: proc(p_module : ^SpvReflectShaderModule, index : u32, p_result : ^SpvReflectResult) -> ^SpvReflectBlockVariable ---;

    @(link_name="spvReflectGetEntryPointPushConstantBlock")
    spv_reflect_get_entry_point_push_constant_block :: proc(p_module : ^SpvReflectShaderModule, entry_point : cstring, p_result : ^SpvReflectResult) -> ^SpvReflectBlockVariable ---;

    @(link_name="spvReflectChangeDescriptorBindingNumbers")
    spv_reflect_change_descriptor_binding_numbers :: proc(p_module : ^SpvReflectShaderModule, p_binding : ^SpvReflectDescriptorBinding, new_binding_number : u32, new_set_number : u32) -> SpvReflectResult ---;

    @(link_name="spvReflectChangeDescriptorSetNumber")
    spv_reflect_change_descriptor_set_number :: proc(p_module : ^SpvReflectShaderModule, p_set : ^SpvReflectDescriptorSet, new_set_number : u32) -> SpvReflectResult ---;

    @(link_name="spvReflectChangeInputVariableLocation")
    spv_reflect_change_input_variable_location :: proc(p_module : ^SpvReflectShaderModule, p_input_variable : ^SpvReflectInterfaceVariable, new_location : u32) -> SpvReflectResult ---;

    @(link_name="spvReflectChangeOutputVariableLocation")
    spv_reflect_change_output_variable_location :: proc(p_module : ^SpvReflectShaderModule, p_output_variable : ^SpvReflectInterfaceVariable, new_location : u32) -> SpvReflectResult ---;

    @(link_name="spvReflectSourceLanguage")
    spv_reflect_source_language :: proc(source_lang : SpvSourceLanguage) -> cstring ---;

    @(link_name="spvReflectBlockVariableTypeName")
    spv_reflect_block_variable_type_name :: proc(p_var : ^SpvReflectBlockVariable) -> cstring ---;

}
